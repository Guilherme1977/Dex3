{"version":3,"sources":["components/Spinner.js","helpers.js","store/selectors.js","store/actions.js","store/interactions.js","components/Navigator.js","components/Trades.js","components/OrderBook.js","components/MyTransactions.js","components/PriceChart.config.js","components/PriceChart.js","components/Balance.js","components/NewOrder.js","components/Market.js","components/Content.js","components/Dex.js","components/DefiContent.js","components/Defi.js","components/Home.js","components/Popup.js","components/Admin.js","components/Nft.js","components/App.js","store/reducers.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["type","className","alt","src","ETHER_ADDRESS","GREEN","RED","ether","wei","web3","utils","fromWei","toString","web3Selector","createSelector","state","get","w","account","accountSelector","a","tokenLoaded","tokenSelector","tl","t","stackingLoadedSelector","sl","stacksSelector","sdl","stackAmountSelector","sa","stackingSelector","exchangeLoaded","exchangeSelector","el","e","rTokenLoadedSelector","tf","rTokenSelector","userSelector","contractsLoadedSelector","allTokensLoadedSelector","loaded","allTokensSelector","tokens","contentLoadedSelector","o","c","contentDataLoadedSelector","totalOrdersLoaded","totalOrdersLoadedSelector","totalOrdersCancelled","totalOrdersFilled","myTotalOpenOrdersSelector","all","filled","cancelled","totalOpenOrders","reject","order","orderFilled","some","id","orderCancelled","orders","filter","user","decorateFilledOrders","cancelledOrdersLoaded","cancelledOrders","filledOrdersLoaded","filledOrdersLoadedSelector","orderFillingSelector","status","filledOrders","filledOrdersSelector","sort","b","timestamp","previousOrder","map","decorateOrder","decorateFilledOrder","etherAmount","tokenAmount","tokenGive","amountGive","amountGet","n","tokenPrice","Math","round","formattedTimestamp","moment","unix","format","tokenPriceClass","orderId","openOrders","allOrders","orderBookLoaded","allOrdersLoaded","orderBookLoadedSelector","orderBookSelector","decorateOrderBookOrders","groupBy","buyOrders","sellOrders","decorateOrderBookOrder","orderType","orderTypeClass","orderFillAction","myFilledOrdersLoadedSelector","myFilledOrdersSelector","userFill","decorateMyFilledOrders","decorateMyFilledOrder","orderSign","myOpenOrdersLoadedSelector","myOpenOrdersSelector","decorateMyOpenOrders","decorateMyOpenOrder","priceChartLoadedSelector","priceChartSelector","secondLastOrder","lastOrder","slice","length","lastPrice","lastPriceChange","series","data","buildGraphData","startOf","graphData","Object","keys","hour","group","open","high","maxBy","low","minBy","close","x","Date","y","console","log","orderCancellingSelector","balancesLoadingSelector","etherBalanceSelector","balance","tokenBalanceSelector","exchangeEtherBalanceSelector","exchangeTokenBalanceSelector","etherDepositAmountSelector","amount","etherWithdrawAmountSelector","tokenDepositAmountSelector","tokenWithdrawAmountSelector","buyOrderSelector","sellOrderSelector","tokenSymbolLoadedSelector","tls","warningSelector","adminPanelSelector","web3AccountLoaded","stacks","tokenBalanceLoaded","exchangeEtherBalanceLoaded","exchangeTokenBalanceLoaded","tokenSymbolLoaded","symbol","warningLoaded","allTokensLoaded","allTokens","contentOn","content","userLoaded","admin","queryRegisterTokenAddress","loadWeb3","dispatch","Web3","givenProvider","window","ethereum","autoRefreshOnNetworkChange","connection","msg","desc","loadAccount","request","method","eth","getAccounts","accounts","loadToken","exchange","address","getPastEvents","fromBlock","toBlock","then","result","event","returnValues","forEach","element","tokenId","tokenToLoad","tokenAddress","token","Contract","Token","abi","contract","loadTokenSymbol","loadBalances","loadAllOrders","loadExchange","networkId","Exchange","networks","loadStacking","stacking","Stacking","cancelStream","cancelledOrderCount","cancelledOrdersOnToken","options","tokenGet","tradeStream","filledOrderCount","filledOrdersOnToken","orderStream","allOrderCount","allOrdersOnToken","totalOrders","loadAllTokens","Promise","methods","getERCsymbol","call","innerResult","subscribeToEvents","events","Cancel","error","Trade","Deposit","Withdraw","Order","fillOrder","exchangeTokenBalance","exchangeEtherBalance","send","from","on","hash","alert","getBalance","etherBalance","ebalance","balanceOf","tokenBalance","tbalance","xebalance","xtbalance","depositEther","value","toWei","withdrawEther","myTotalOpenOrders","decimals","totalEtherInOrder","asOpenOrders","totalToWithdraw","depositToken","parseInt","approve","withdrawToken","totalTokensInOrder","makeBuyOrder","price","makeOrder","makeSellOrder","loadStackData","poolLength","len","i","poolInfo","getERCBalance","tokenStack","getERCname","stackingBalanceOf","pendingIDT","stackToken","tokenx","deposit","unStackToken","withdraw","UnloadWarning","CloseAdminPanel","OpenAdminPanel","OpenContent","loadUser","isAdmin","registerToken","queryRegisterToken","rTokenSymbol","rTokenName","getERCtotalSupply","rTokentotalSupply","getERCdecimals","rTokenDecimals","name","totalSupply","addToMetamask","tokenSymbol","tokenDecimals","params","image","Navigator","this","loadBlockchainData","props","Navbar","bg","variant","collapseOnSelect","expand","Brand","width","height","Toggle","aria-controls","Collapse","Nav","Link","onClick","showAdminPanel","Spinner","Identicon","foreground","background","margin","size","Component","connect","Trades","key","renderOrder","OverlayTrigger","trigger","placement","overlay","Tooltip","OrderBook","showOrderBook","orderBook","orderFilling","showMyOpenOrders","myOpenOrders","cancelOrder","MyTransactions","Tabs","defaultActiveKey","Tab","eventKey","title","showMyFilledOrders","myFilledOrders","myOpenOrdersLoaded","orderCancelling","chartOptions","plotOptions","candlestick","colors","upward","downward","wick","useFillColor","chart","animations","enabled","foreColor","toolbar","show","theme","tooltip","style","fontSize","fontFamily","undefined","formatter","marker","items","display","fixed","position","offsetX","offsetY","xaxis","labels","cssClass","yaxis","minWidth","maxWidth","rotate","priceSymbol","PriceChart","showPriceChart","priceChart","priceChartLoaded","showBalance","Balance","showForm","etherDepositAmount","etherWithdrawAmount","tokenDepositAmount","tokenWithdrawAmount","onSubmit","preventDefault","min","step","placeholder","onChange","target","required","balancesLoading","NewOrder","buyOrder","sellOrder","showBuyTotal","showSellTotal","toFixed","replace","making","Market","showTokens","TokenId","Content","Dex","net","getNetworkType","getId","contractsLoaded","DefiContent","stackAmount","stack","index","stacked","supply","pending","showStack","Defi","Home","Popup","loadAppData","warning","Admin","rtokenLoaded","rtoken","rel","href","showData","max","Nft","App","contentData","renderContent","initialState","loading","rootReducer","combineReducers","action","market","cancelledTokens","orderCacelling","findIndex","adminPanel","info","loggerMiddleware","createLogger","middleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","preloadedState","Boolean","location","hostname","match","ReactDOM","render","store","createStore","applyMiddleware","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a0ea9280.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function({type}){\r\n    if(type === 'table'){\r\n        return (<tbody className=\"text-center\"><tr><td><img className=\"spinner\" alt=\"Loading...\" src=\"../logo.svg\"></img></td></tr></tbody>)\r\n    }else{\r\n        return(<div className=\"text-center\"><img className=\"spinner\" alt=\"Loading...\" src=\"../logo.svg\"></img> </div>)\r\n    }\r\n}","import web3 from 'web3'\nexport const ETHER_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const DECIMALS = (10**18)\nexport const GREEN = 'success'\nexport const RED = 'danger'\n\n//shortcut to avoid passing arround web3 connection\nexport const ether = (wei) => {\n    if(wei){\n      //  console.log('Amount passed : ',(wei))\n      //  console.log('Conveted : ',web3.utils.toWei(wei.toString(),'ether'))\n\n        return(web3.utils.fromWei(wei.toString(),'ether')) // 18 decimal places\n       \n    }\n}\n\n// tokens and ether have same decimals resolution\nexport const tokens = (n) => ether(n)\n\n\n//  const wait = (seconds) => {\n//     const milliseconds = seconds * 1000\n//     return new Promise(resolve => setTimeout(resolve, milliseconds))\n// }","import { get, groupBy, reject, maxBy, minBy } from 'lodash'\r\nimport { createSelector } from 'reselect'\r\nimport moment from 'moment'\r\nimport { ETHER_ADDRESS, GREEN, RED, tokens, ether } from '../helpers'\r\n\r\n\r\nexport const formatBalance = (balance) => {\r\n  // const precision = 10000\r\n  // balance = ether(balance)\r\n  // balance = Math.round(balance * precision) / precision\r\n  return balance\r\n}\r\n\r\n\r\n\r\nconst web3 = state => get(state, 'web3.connection')\r\nexport const web3Selector = createSelector(web3, w => w)\r\n\r\nconst account = state => get(state, 'web3.account')\r\nexport const accountSelector = createSelector(account, a => a)\r\n\r\nconst tokenLoaded = state => get(state, 'token.loaded', false)\r\nexport const tokenLoadedSelector = createSelector(tokenLoaded, tl => tl)\r\n\r\nconst token = state => get(state, 'token.contract')\r\nexport const tokenSelector = createSelector(token, t => t)\r\n\r\nconst stackingLoaded = state => get(state, 'stacking.loaded', false)\r\nexport const stackingLoadedSelector = createSelector(stackingLoaded, sl => sl)\r\nconst stacks = state => get(state, 'stacking.data', [])\r\nexport const stacksSelector = createSelector(stacks, sdl => sdl)\r\nconst stackAmount = state => get(state, 'stacking.amount', false)\r\nexport const stackAmountSelector = createSelector(stackAmount, sa => sa)\r\n\r\n\r\nconst stacking = state => get(state, 'stacking.contract')\r\nexport const stackingSelector = createSelector(stacking, sl => sl)\r\n\r\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false)\r\nexport const exchangeLoadedSelector = createSelector(exchangeLoaded, el => el)\r\n\r\nconst exchange = state => get(state, 'exchange.contract')\r\nexport const exchangeSelector = createSelector(exchange, e => e)\r\n\r\nconst RTokenLoaded = state => get(state, 'adminPanel.info', false)\r\nexport const rTokenLoadedSelector = createSelector(RTokenLoaded, tf => tf)\r\n\r\nconst loadRTokenInfo = state => get(state, 'adminPanel.data', [])\r\nexport const rTokenSelector = createSelector(loadRTokenInfo, tf => tf)\r\n\r\n\r\nconst loadUser = state => get(state, 'exchange.user', [])\r\nexport const userSelector = createSelector(loadUser, a => a)\r\n\r\n\r\nexport const contractsLoadedSelector = createSelector(\r\n  tokenLoaded,\r\n  exchangeLoaded,\r\n\r\n  (tl, el) => (tl && el)\r\n)\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// TOKENS\r\n\r\n\r\nconst allTokensLoaded = state => get(state, 'exchange.allTokens.loaded', false)\r\nexport const allTokensLoadedSelector = createSelector(allTokensLoaded, loaded => loaded)\r\n\r\nconst allTokens = state => get(state, 'exchange.allTokens.data', [])\r\nexport const allTokensSelector = createSelector(allTokens, tokens => tokens)\r\n\r\n//TDOD FILTER THE CANCELLED TOKEN AND RETURN OPEN TOKEN\r\n\r\nconst cancelledTokensLoaded = state => get(state, 'exchange.cancelledTokens.loaded', false)\r\nexport const cancelledTokensLoadedSelector = createSelector(cancelledTokensLoaded, loaded => loaded)\r\n\r\nconst cancelledTokens = state => get(state, 'exchange.cancelledTokens.data', [])\r\nexport const cancelledTokensSelector = createSelector(cancelledTokens, o => o)\r\n\r\n///////////////////////////////////////////////////////////////////////////////////// CONTENT\r\n\r\n\r\nconst contentLoaded = state => get(state, 'content.loaded', false)\r\nexport const contentLoadedSelector = createSelector(contentLoaded, c => c)\r\n\r\nconst contentDataLoaded = state => get(state, 'content.data', [])\r\nexport const contentDataLoadedSelector = createSelector(contentDataLoaded, c => c)\r\n\r\n/////////////////////////////////////////////////////////////////////////testing ORDERS\r\n\r\n\r\nconst totalOrdersLoaded = state => get(state, 'exchange.totalOrders.data', [])\r\nexport const totalOrdersLoadedSelector = createSelector(totalOrdersLoaded, loaded => loaded)\r\n\r\nconst totalOrdersCancelled = state => get(state, 'exchange.totalOrdersCancelled.data', [])\r\nexport const totalOrdersCancelledSelector = createSelector(totalOrdersCancelled, loaded => loaded)\r\n\r\nconst totalOrdersFilled = state => get(state, 'exchange.totalOrdersFilled.data', [])\r\nexport const totalOrdersFilledSelector = createSelector(totalOrdersFilled, loaded => loaded)\r\n\r\nconst totalOpenOrders = state => {\r\n  const all = totalOrdersLoaded(state)    // < --------------- CHECK \r\n  const filled = totalOrdersFilled(state)\r\n  const cancelled = totalOrdersCancelled(state)\r\n\r\n  const totalOpenOrders = reject(all, (order) => {\r\n    const orderFilled = filled.some((o) => o.id === order.id)\r\n    const orderCancelled = cancelled.some((o) => o.id === order.id)\r\n    return(orderFilled || orderCancelled)\r\n  })\r\n\r\n  return totalOpenOrders\r\n}\r\n\r\n\r\nexport const myTotalOpenOrdersSelector = createSelector(\r\n  account,\r\n  totalOpenOrders,\r\n  (account, orders) => {\r\n      // filter orders created by current account\r\n      orders = orders.filter((o) => o.user === account)\r\n      //orders = decorateOrder(orders)\r\n      orders = decorateFilledOrders(orders)\r\n      return orders\r\n\r\n  }\r\n)\r\n\r\n//////////////////////////////////////////////////////////////////////////////////// LOADING ALL ORDER\r\n\r\n// All Orders\r\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false)\r\nconst allOrders = state => get(state, 'exchange.allOrders.data', [])\r\n\r\n// Cancelled orders\r\nconst cancelledOrdersLoaded = state => get(state, 'exchange.cancelledOrders.loaded', false)\r\nexport const cancelledOrdersLoadedSelector = createSelector(cancelledOrdersLoaded, loaded => loaded)\r\n\r\nconst cancelledOrders = state => get(state, 'exchange.cancelledOrders.data', [])\r\nexport const cancelledOrdersSelector = createSelector(cancelledOrders, o => o)\r\n\r\n// Filled Orders\r\nconst filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false)\r\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\r\n\r\n// Order Filling\r\nconst orderFilling = state => get(state, 'exchange.orderFilling', false)\r\nexport const orderFillingSelector = createSelector(orderFilling, status => status)\r\n\r\n\r\n\r\n\r\nconst filledOrders = state => get(state, 'exchange.filledOrders.data', [])\r\nexport const filledOrdersSelector = createSelector(\r\n  filledOrders,\r\n  (orders) => {\r\n    \r\n    // Sort orders by date ascending for price comparison\r\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\r\n    // Decorate the orders\r\n    orders = decorateFilledOrders(orders)\r\n    // Sort orders by date descending for display\r\n    orders = orders.sort((a,b) => b.timestamp - a.timestamp)\r\n    return orders\r\n  }\r\n)\r\n\r\nconst decorateFilledOrders = (orders) => {\r\n  // Track previous order to compare history\r\n  let previousOrder = orders[0]\r\n  return(\r\n    orders.map((order) => {\r\n      order = decorateOrder(order)\r\n      order = decorateFilledOrder(order, previousOrder)\r\n      previousOrder = order // Update the previous order once it's decorated\r\n      return order\r\n    })\r\n  )\r\n}\r\n\r\nconst decorateOrder = (order) => {\r\n  let etherAmount\r\n  let tokenAmount\r\n\r\n  if(order.tokenGive === ETHER_ADDRESS) {\r\n    etherAmount = order.amountGive\r\n    tokenAmount = order.amountGet\r\n  } else {\r\n    etherAmount = order.amountGet\r\n    tokenAmount = order.amountGive\r\n  }\r\n\r\n  // Calculate token price to 5 decimal places\r\n  const precision = 100000\r\n  let tokenPrice = (etherAmount / tokenAmount)\r\n  tokenPrice = Math.round(tokenPrice * precision) / precision\r\n\r\n  return({\r\n    ...order,\r\n    etherAmount: ether(etherAmount),\r\n    tokenAmount: tokens(tokenAmount),\r\n    tokenPrice,\r\n    formattedTimestamp: moment.unix(order.timestamp).format('h:mm:ss a M/D')\r\n  })\r\n}\r\n\r\nconst decorateFilledOrder = (order, previousOrder) => {\r\n  return({\r\n    ...order,\r\n    tokenPriceClass: tokenPriceClass(order.tokenPrice, order.id, previousOrder)\r\n  })\r\n}\r\n\r\nconst tokenPriceClass = (tokenPrice, orderId, previousOrder) => {\r\n  // Show green price if only one order exists\r\n  if(previousOrder.id === orderId) {\r\n    return GREEN\r\n  }\r\n\r\n  // Show green price if order price higher than previous order\r\n  // Show red price if order price lower than previous order\r\n  if(previousOrder.tokenPrice <= tokenPrice) {\r\n    return GREEN // success\r\n  } else {\r\n    return RED // danger\r\n  }\r\n}\r\n\r\nconst openOrders = state => {\r\n  const all = allOrders(state)    // < --------------- CHECK \r\n  const filled = filledOrders(state)\r\n  const cancelled = cancelledOrders(state)\r\n\r\n  const openOrders = reject(all, (order) => {\r\n    const orderFilled = filled.some((o) => o.id === order.id)\r\n    const orderCancelled = cancelled.some((o) => o.id === order.id)\r\n    return(orderFilled || orderCancelled)\r\n  })\r\n\r\n  return openOrders\r\n}\r\n\r\n\r\nconst orderBookLoaded = state => cancelledOrdersLoaded(state) && filledOrdersLoaded(state) && allOrdersLoaded(state)\r\nexport const orderBookLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\r\n//console.log(cancelledOrdersLoaded(state))\r\n\r\n\r\n\r\n\r\n// Create the order book\r\nexport const orderBookSelector = createSelector(\r\n  openOrders,\r\n  (orders) => {\r\n    // Decorate orders\r\n    orders = decorateOrderBookOrders(orders)\r\n    // Group orders by \"orderType\"\r\n    orders = groupBy(orders, 'orderType')\r\n    // Fetch buy orders\r\n    const buyOrders = get(orders, 'buy', [])\r\n    // Sort buy orders by token price\r\n    orders = {\r\n      ...orders,\r\n      buyOrders: buyOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\r\n    }\r\n    // Fetch sell orders\r\n    const sellOrders = get(orders, 'sell', [])\r\n    // Sort sell orders by token price\r\n    orders = {\r\n      ...orders,\r\n      sellOrders: sellOrders.sort((a,b) => b.tokenPrice - a.tokenPrice)\r\n    }\r\n    return orders\r\n  }\r\n)\r\n\r\nconst decorateOrderBookOrders = (orders) => {\r\n  return(\r\n    orders.map((order) => {\r\n      order = decorateOrder(order)\r\n      order = decorateOrderBookOrder(order)\r\n      return(order)\r\n    })\r\n  )\r\n}\r\n\r\nconst decorateOrderBookOrder = (order) => {\r\n  const orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\r\n  return({\r\n    ...order,\r\n    orderType,\r\n    orderTypeClass: (orderType === 'buy' ? GREEN : RED),\r\n    orderFillAction: orderType === 'buy' ? 'sell' : 'buy'\r\n  })\r\n}\r\n/////////////////////////////////////////////////////////////////////////////////////////////////\r\n// MY TRANSACTION \r\n//\r\nexport const myFilledOrdersLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\r\n\r\nexport const myFilledOrdersSelector = createSelector(\r\n    account,\r\n    filledOrders,\r\n    (account, orders) => {\r\n        // find our orders\r\n        orders = orders.filter((o) => o.user === account || o.userFill === account)\r\n        // sort by date ascending\r\n        orders = orders.sort((a,b) => a.timestamp - b.timestamp)\r\n        // decorate orders - add display attribute\r\n        orders = decorateMyFilledOrders(orders, account)\r\n        return orders\r\n\r\n    }\r\n)\r\nconst decorateMyFilledOrders = (orders, account) => {\r\n    return(\r\n        orders.map((order) => {\r\n            order = decorateOrder(order)\r\n            order = decorateMyFilledOrder(order, account)\r\n            return(order)\r\n        })\r\n    )\r\n}\r\n\r\nconst decorateMyFilledOrder = (order,account) => {\r\n    const myOrder = order.user === account\r\n\r\n    let orderType\r\n    if(myOrder) {\r\n        orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\r\n    }else {\r\n        orderType = order.tokenGive === ETHER_ADDRESS ? 'sell' : 'buy'\r\n    }\r\n\r\n    return({\r\n        ...order,\r\n        orderType,\r\n        orderTypeClass: (orderType === 'buy' ? GREEN : RED),\r\n        orderSign: (orderType === 'buy' ? '+' : '-')\r\n    })\r\n}\r\n\r\nexport const myOpenOrdersLoadedSelector = createSelector(orderBookLoaded, loaded => loaded)\r\nexport const myOpenOrdersSelector = createSelector(\r\n    account,\r\n    openOrders,\r\n    (account, orders) => {\r\n        // filter orders created by current account\r\n        orders = orders.filter((o) => o.user === account)\r\n        // decorate orders and display attribut\r\n        orders = decorateMyOpenOrders(orders)\r\n        //sort orders by date desc\r\n        orders = orders.sort((a,b) => b.timestamp - a.timestamp)\r\n        return orders\r\n\r\n    }\r\n)\r\n\r\nconst decorateMyOpenOrders = (orders, account) => {\r\n    return(\r\n        orders.map((order) => {\r\n            order = decorateOrder(order)\r\n            order = decorateMyOpenOrder(order, account)\r\n            return(order)\r\n        })\r\n    )\r\n}\r\nconst decorateMyOpenOrder = (order, account) => {\r\n    let orderType = order.tokenGive === ETHER_ADDRESS ? 'buy' : 'sell'\r\n    return({\r\n        ...order,\r\n        orderType,\r\n        orderTypeClass: (orderType === 'buy' ? GREEN : RED),\r\n        \r\n    })\r\n}\r\n/////////////////////////////////////////////////////////////////////////////////////////\r\n// PRICE CHART\r\n//\r\nexport const priceChartLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\r\n\r\nexport const priceChartSelector = createSelector(\r\n  filledOrders,\r\n  (orders) => {\r\n    // Sort orders by date ascending to compare history\r\n    orders = orders.sort((a,b) => a.timestamp - b.timestamp)\r\n    // Decorate orders - add display attributes\r\n    orders = orders.map((o) => decorateOrder(o))\r\n    // Get last 2 order for final price & price change\r\n    let secondLastOrder, lastOrder\r\n    [secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length)\r\n    // get last order price\r\n    const lastPrice = get(lastOrder, 'tokenPrice', 0)\r\n    // get second last order price\r\n    const secondLastPrice = get(secondLastOrder, 'tokenPrice', 0)\r\n\r\n    return({\r\n      lastPrice,\r\n      lastPriceChange: (lastPrice >= secondLastPrice ? '+' : '-'),\r\n      series: [{\r\n        data: buildGraphData(orders)\r\n      }]\r\n    })\r\n  }\r\n)\r\n\r\nconst buildGraphData = (orders) => {\r\n  // Group the orders by hour for the graph\r\n  orders = groupBy(orders, (o) => moment.unix(o.timestamp).startOf('hour').format())\r\n  // Get each hour where data exists\r\n  const hours = Object.keys(orders)\r\n  // Build the graph series\r\n  const graphData = hours.map((hour) => {\r\n    // Fetch all the orders from current hour\r\n    const group = orders[hour]\r\n    // Calculate price values - open, high, low, close\r\n    const open = group[0] // first order\r\n    const high = maxBy(group, 'tokenPrice') // high price\r\n    const low = minBy(group, 'tokenPrice') // low price\r\n    const close = group[group.length - 1] // last order\r\n\r\n    return({\r\n      x:  new Date(hour),\r\n      y:  [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\r\n    })\r\n  })\r\nconsole.log('GRAPH DATA : ',graphData)\r\n  return graphData\r\n}\r\n\r\n// Cancelling order\r\nconst orderCancelling = state => get(state, 'exchange.orderCanelling', false)\r\nexport const orderCancellingSelector = createSelector(orderCancelling, status => status)\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////BALANCES\r\nconst balancesLoading = state => get(state, 'exchange.balancesLoading', true)\r\nexport const balancesLoadingSelector = createSelector(balancesLoading, status => status)\r\n\r\n\r\n\r\n\r\n\r\nconst etherBalance = state => get(state, 'web3.balance', 0)\r\nexport const etherBalanceSelector = createSelector(\r\n  etherBalance,\r\n  (balance) => {\r\n    return formatBalance(balance)\r\n  }\r\n)\r\n\r\nconst tokenBalance = state => get(state, 'token.balance', 0)\r\nexport const tokenBalanceSelector = createSelector(\r\n  tokenBalance,\r\n  (balance) => {\r\n    return formatBalance(balance)\r\n  }\r\n)\r\nconst exchangeEtherBalance = state => get(state, 'exchange.etherBalance', 0)\r\nexport const exchangeEtherBalanceSelector = createSelector(\r\n  exchangeEtherBalance,\r\n  (balance) => {\r\n    return formatBalance(balance)\r\n  }\r\n)\r\n\r\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0)\r\nexport const exchangeTokenBalanceSelector = createSelector(\r\n  exchangeTokenBalance,\r\n  (balance) => {\r\n    return formatBalance(balance)\r\n  }\r\n)\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////// EXCHANGE DEPOSIT\r\n\r\nconst etherDepositAmount = state => get(state, 'exchange.etherDepositAmount', null)\r\nexport const etherDepositAmountSelector = createSelector(etherDepositAmount, amount => amount)\r\n\r\nconst etherWithdrawAmount = state => get(state, 'exchange.etherWithdrawAmount', null)\r\nexport const etherWithdrawAmountSelector = createSelector(etherWithdrawAmount, amount => amount)\r\n\r\nconst tokenDepositAmount = state => get(state, 'exchange.tokenDepositAmount', null)\r\nexport const tokenDepositAmountSelector = createSelector(tokenDepositAmount, amount => amount)\r\n\r\nconst tokenWithdrawAmount = state => get(state, 'exchange.tokenWithdrawAmount', null)\r\nexport const tokenWithdrawAmountSelector = createSelector(tokenWithdrawAmount, amount => amount)\r\n\r\nconst buyOrder = state => get(state, 'exchange.buyOrder', {})\r\nexport const buyOrderSelector = createSelector(buyOrder, amount => amount)\r\n\r\nconst sellOrder = state => get(state, 'exchange.sellOrder', {})\r\nexport const sellOrderSelector = createSelector(sellOrder, amount => amount)\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////////////////////TESTING FOR TOKEN SYMBOL\r\nconst tokenSymbolLoaded = state => get(state, 'token.symbol')\r\nexport const tokenSymbolLoadedSelector = createSelector(tokenSymbolLoaded, tls => tls)\r\n\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////POPUP\r\n\r\n\r\nconst warning = state => get(state, 'warning.data')\r\nexport const warningSelector = createSelector(warning, w => w)\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////ADMIN PANEL\r\n\r\n\r\nconst adminPanel = state => get(state, 'adminPanel', false)\r\nexport const adminPanelSelector = createSelector(adminPanel, w => w)","// WEB3\r\nexport function web3Loaded(connection) {\r\n  return {\r\n    type: 'WEB3_LOADED',\r\n    connection\r\n  }\r\n}\r\n\r\nexport function web3AccountLoaded(account) {\r\n  return {\r\n    type: 'WEB3_ACCOUNT_LOADED',\r\n    account\r\n  }\r\n}\r\n\r\n// TOKEN\r\nexport function tokenLoaded(contract) {\r\n  return {\r\n    type: 'TOKEN_LOADED',\r\n    contract\r\n  }\r\n}\r\n\r\n// EXCHANGE\r\nexport function exchangeLoaded(contract) {\r\n  return {\r\n    type: 'EXCHANGE_LOADED',\r\n    contract\r\n  }\r\n}\r\n//////////////////////////////////////////////// DEFI\r\nexport function stackingLoaded(contract) {\r\n  return {\r\n    type: 'STACKING_LOADED',\r\n    contract\r\n  }\r\n}\r\nexport function stacks(data) {\r\n  return {\r\n    type: 'STACKS',\r\n    data\r\n  }\r\n}\r\nexport function stackAmountChanged(amount) {\r\n  return {\r\n    type: 'STACKS_AMOUNT_CHANGED',\r\n    amount\r\n  }\r\n}\r\n/////////////////////////////////////////////////////////// FOR ORDERS ON SELECTED TOKEN\r\nexport function cancelledOrdersLoaded(cancelledOrders) {\r\n  return {\r\n    type: 'CANCELLED_ORDERS_LOADED',\r\n    cancelledOrders\r\n  }\r\n}\r\n\r\nexport function filledOrdersLoaded(filledOrders) {\r\n  return {\r\n    type: 'FILLED_ORDERS_LOADED',\r\n    filledOrders\r\n  }\r\n}\r\n\r\nexport function allOrdersLoaded(allOrders) {\r\n  return {\r\n    type: 'ALL_ORDERS_LOADED',\r\n    allOrders\r\n  }\r\n}\r\n//////////////////////////////////////////////////////// FOR ALL ORDERS HISTORY\r\nexport function totalOrdersLoaded(totalOrders) {\r\n  return {\r\n    type: 'TOTAL_ORDERS_LOADED',\r\n    totalOrders\r\n  }\r\n}\r\nexport function totalOrdersCancelled(totalOrdersCancelled) {\r\n  return {\r\n    type: 'TOTAL_ORDERS_CANCELLED_LOADED',\r\n    totalOrdersCancelled\r\n  }\r\n}\r\nexport function totalOrdersFilled(totalOrdersFilled) {\r\n  return {\r\n    type: 'TOTAL_ORDERS_FILLED',\r\n    totalOrdersFilled\r\n  }\r\n}\r\n\r\n// Cancel Order\r\nexport function orderCancelling() {\r\n  return {\r\n    type: 'ORDER_CANCELLING'\r\n  }\r\n}\r\n\r\nexport function orderCancelled(order) {\r\n  return {\r\n    type: 'ORDER_CANCELLED',\r\n    order\r\n  }\r\n}\r\n\r\n// Fill Order\r\nexport function orderFilling() {\r\n  return {\r\n    type: 'ORDER_FILLING'\r\n  }\r\n}\r\n\r\nexport function orderFilled(order) {\r\n  return {\r\n    type: 'ORDER_FILLED',\r\n    order\r\n  }\r\n}\r\n\r\n// Balances\r\nexport function etherBalanceLoaded(balance) {\r\n  return {\r\n    type: 'ETHER_BALANCE_LOADED',\r\n    balance\r\n  }\r\n}\r\n\r\nexport function tokenBalanceLoaded(balance) {\r\n  return {\r\n    type: 'TOKEN_BALANCE_LOADED',\r\n    balance\r\n  }\r\n}\r\n\r\nexport function exchangeEtherBalanceLoaded(balance) {\r\n  return {\r\n    type: 'EXCHANGE_ETHER_BALANCE_LOADED',\r\n    balance\r\n  }\r\n}\r\n\r\nexport function exchangeTokenBalanceLoaded(balance) {\r\n  return {\r\n    type: 'EXCHANGE_TOKEN_BALANCE_LOADED',\r\n    balance\r\n  }\r\n}\r\n\r\nexport function balancesLoaded() {\r\n  return {\r\n    type: 'BALANCES_LOADED'\r\n  }\r\n}\r\n\r\nexport function balancesLoading() {\r\n  return {\r\n    type: 'BALANCES_LOADING'\r\n  }\r\n}\r\n\r\nexport function etherDepositAmountChanged(amount) {\r\n  return {\r\n    type: 'ETHER_DEPOSIT_AMOUNT_CHANGED',\r\n    amount\r\n  }\r\n}\r\n\r\nexport function etherWithdrawAmountChanged(amount) {\r\n  return {\r\n    type: 'ETHER_WITHDRAW_AMOUNT_CHANGED',\r\n    amount\r\n  }\r\n}\r\n\r\nexport function tokenDepositAmountChanged(amount) {\r\n  return {\r\n    type: 'TOKEN_DEPOSIT_AMOUNT_CHANGED',\r\n    amount\r\n  }\r\n}\r\n\r\nexport function tokenWithdrawAmountChanged(amount) {\r\n  return {\r\n    type: 'TOKEN_WITHDRAW_AMOUNT_CHANGED',\r\n    amount\r\n  }\r\n}\r\n\r\n// Buy Order\r\nexport function buyOrderAmountChanged(amount) {\r\n  return {\r\n    type: 'BUY_ORDER_AMOUNT_CHANGED',\r\n    amount\r\n  }\r\n}\r\n\r\nexport function buyOrderPriceChanged(price) {\r\n  return {\r\n    type: 'BUY_ORDER_PRICE_CHANGED',\r\n    price\r\n  }\r\n}\r\n\r\nexport function buyOrderMaking(price) {\r\n  return {\r\n    type: 'BUY_ORDER_MAKING'\r\n  }\r\n}\r\n\r\n// Generic Order\r\nexport function orderMade(order) {\r\n  return {\r\n    type: 'ORDER_MADE',\r\n    order\r\n  }\r\n}\r\n\r\n// Sell Order\r\nexport function sellOrderAmountChanged(amount) {\r\n  return {\r\n    type: 'SELL_ORDER_AMOUNT_CHANGED',\r\n    amount\r\n  }\r\n}\r\n\r\nexport function sellOrderPriceChanged(price) {\r\n  return {\r\n    type: 'SELL_ORDER_PRICE_CHANGED',\r\n    price\r\n  }\r\n}\r\n\r\nexport function sellOrderMaking(price) {\r\n  return {\r\n    type: 'SELL_ORDER_MAKING'\r\n  }\r\n}\r\n  //////////////////////////////////////////////////////////////////////// CUSTOM MADE STUFF\r\n  export function tokenSymbolLoaded(symbol) {\r\n    return {\r\n      type: 'TOKEN_SYMBOL_LOADED',\r\n      symbol\r\n    }\r\n  }\r\n//////////////////////////////////////////////////// WARNING POPUP\r\n  export function warningLoaded(data) {\r\n    return{\r\n      type: 'WARNING_LOADED',\r\n      data\r\n    }\r\n}\r\nexport function warningAkLoaded() {\r\n  return{\r\n    type: 'WARNING_AK_LOADED',\r\n    \r\n  }\r\n}\r\n//////////////////////////////////////////////////// ADMIN PANEL\r\nexport function adminOn() {\r\n  return{\r\n    type: 'ADMIN_ON',\r\n  }\r\n}\r\nexport function adminOff() {\r\nreturn{\r\n  type: 'ADMIN_OFF',\r\n  \r\n}\r\n}\r\n\r\n/////////////////////////////////////////////////// ALL TOKENS\r\n  export function allTokensLoaded(allTokens) {\r\n    return {\r\n      type: 'ALL_TOKENS_LOADED',\r\n      allTokens\r\n    }\r\n  }\r\n\r\n  export function cancelledTokensLoaded(cancelledTokens) {\r\n    return {\r\n      type: 'CANCELLED_TOKENS_LOADED',\r\n      cancelledTokens\r\n    }\r\n  }\r\n  \r\n/////////////////////////////////////////////////// CONTENT\r\nexport function contentOn(content) {\r\n  return {\r\n    type: 'CONTENT_LOADED',\r\n    content\r\n  }\r\n}\r\nexport function contentData(data) {\r\n  return {\r\n    type: 'CONTENT_DATA_LOADED',\r\n    data\r\n  }\r\n}\r\n\r\n\r\nexport const setTokens = (staff) => ({\r\n  type: 'SET_TOKENS',\r\n  staff\r\n})\r\n/////////////////////////////////CHECKING USER\r\nexport const userLoaded = (admin) => ({\r\n  type: 'LOAD_USER',\r\n  admin\r\n})\r\n/////////////////////////////////TOKEN REGISTRATION\r\nexport const registerTokenAddress = (address) => ({\r\ntype: 'REGISTER_TOKEN_ADDRESS',\r\naddress\r\n})\r\n\r\nexport const queryRegisterTokenAddress = (data) => ({\r\n  type: 'QUERY_REGISTER_TOKEN_ADDRESS',\r\n  data\r\n  })\r\n\r\n  export const showRegisterTokenInfo = () => ({\r\n    type: 'SHOW_REGISTER_TOKEN_INFO',\r\n   \r\n    })","import Web3 from 'web3'\r\nimport Token from '../abis/Token.json' \r\nimport Exchange from '../abis/Exchange.json'\r\nimport Stacking from '../abis/Stacking.json'\r\n\r\nimport { ETHER_ADDRESS } from '../helpers'\r\n\r\n// Importing Actions\r\nimport {\r\n    web3Loaded,\r\n    web3AccountLoaded, \r\n    tokenLoaded,\r\n    exchangeLoaded,\r\n    cancelledOrdersLoaded,\r\n    filledOrdersLoaded,\r\n    allOrdersLoaded,\r\n    orderCancelling,\r\n    orderCancelled,\r\n    orderFilling,\r\n    orderFilled,\r\n    tokenSymbolLoaded,\r\n    etherBalanceLoaded,\r\n    tokenBalanceLoaded,\r\n    exchangeEtherBalanceLoaded,\r\n    exchangeTokenBalanceLoaded,\r\n    balancesLoaded,\r\n    balancesLoading,\r\n    buyOrderMaking,\r\n    sellOrderMaking,\r\n    orderMade,\r\n    totalOrdersLoaded,\r\n    allTokensLoaded,\r\n    totalOrdersCancelled,\r\n    totalOrdersFilled,\r\n    userLoaded,\r\n    warningLoaded,\r\n    warningAkLoaded,\r\n    adminOff,\r\n    adminOn,\r\n    queryRegisterTokenAddress,\r\n    showRegisterTokenInfo,\r\n    stackingLoaded,\r\n    stacks,\r\n    contentOn,\r\n    contentData\r\n} from './actions'\r\n\r\n// LOADING WEB3 ETEREUM\r\nexport const loadWeb3 = (dispatch) => {\r\n    // Connecting to network or Ganache\r\n    const web3 = new Web3(Web3.givenProvider || 'http://localhost:7545') \r\n    if(!web3){\r\n        const data = { msg: 'Not connected to the network', desc: 'Please Download Metamask to acces this exchange and connect it to the proper network'}\r\n        dispatch(warningLoaded(data))\r\n        return\r\n    }else {\r\n       if(!window.ethereum){\r\n          const data = { msg: 'Not connected to the network', desc: 'Please Download Metamask to acces this exchange and connect it to the proper network'}\r\n          dispatch(warningLoaded(data))\r\n          return\r\n       } else {\r\n          // silence metamask warning\r\n          window.ethereum.autoRefreshOnNetworkChange = false\r\n          dispatch(web3Loaded(web3))\r\n          return web3\r\n       }          \r\n    }\r\n}\r\n \r\n// LOADING METAMASK ACCOUNT\r\nexport const loadAccount = async (web3, dispatch) => {\r\n    await window.ethereum.request({ method: 'eth_requestAccounts' })\r\n\t  const accounts = await web3.eth.getAccounts()\r\n\t  const account = await accounts[0]\r\n\t  if(typeof account !== 'undefined'){\r\n\t\t  dispatch(web3AccountLoaded(account))\r\n\t\t  return account\r\n  \t} else {\r\n\t\t  const data = { msg: 'Could not connet to your wallet', desc: 'Please Download Metamask to acces this exchange and connect it to the proper network'}\r\n      dispatch(warningLoaded(data))\r\n      return\r\n\t  }\r\n} \r\n\r\n// LOADING TOKENS CONTRACT\r\nexport const loadToken = async (web3, exchange, address, dispatch) => {\r\n  console.log('Received Address : ',address)\r\n  let tokenToLoad\r\n  //Need to deal with NetworkId\r\n  await exchange.getPastEvents('OtherToken', {fromBlock:0, toBlock: 'latest'}).then( async(result) => {\r\n    const allTokens = result.map((event) => event.returnValues)\r\n    allTokens.forEach(element => {\r\n      // If no address is defined\r\n      if(address === 0){  \r\n         if(element.tokenId === '1' ) {\r\n            // Load the first registered token\r\n            tokenToLoad = element.tokenAddress\r\n         }\r\n      // An adress was defined\r\n      } else {\r\n        if (element.tokenAddress === address){\r\n          tokenToLoad = element.tokenAddress\r\n        }\r\n      }\r\n    })\r\n })\r\n  try {\r\n      // need to load optionals from admin panel. see https://web3js.readthedocs.io/en/v1.2.0/web3-eth-contract.html\r\n      const token = new web3.eth.Contract(Token.abi, tokenToLoad) \r\n      console.log('TOKEN TO LOAD',tokenToLoad)\r\n      dispatch(tokenLoaded(token))\r\n      loadTokenSymbol(token, dispatch).then( async () => {\r\n        dispatch(balancesLoading())\r\n        // TODO add spiners on order loading when not filling\r\n        loadAccount(web3,dispatch).then(async (result) => {\r\n        loadBalances(dispatch, web3, exchange, token, result)\r\n        loadAllOrders(exchange, dispatch, token)\r\n        })   \r\n      })\r\n      return token\r\n    } catch (error) {\r\n        const data = { msg: 'Could not load contract', desc: 'You sould report this issue to the administrator'}\r\n        dispatch(warningLoaded(data))\r\n        return\r\n    } \r\n  }\r\n\r\n  // LOADING EXCHANGE ETHEREUM CONTRACT\r\n  export const loadExchange = async (web3, networkId, dispatch) => {\r\n    try {\r\n      const exchange = new web3.eth.Contract(Exchange.abi, Exchange.networks[networkId].address)\r\n      dispatch(exchangeLoaded(exchange))\r\n      return exchange\r\n    } catch (error) {\r\n        console.log('Exchange contract not deployed to the current network. Please select another network with Metamask.')\r\n      return null\r\n    }\r\n  }\r\n\r\n  // LOADING STACKING ETHEREUM CONTRACT\r\n  export const loadStacking = async (web3, networkId, dispatch) => {\r\n    try {\r\n      const stacking = new web3.eth.Contract(Stacking.abi, Stacking.networks[networkId].address)\r\n      dispatch(stackingLoaded(stacking))\r\n      return stacking\r\n    } catch (error) {\r\n        console.log('Exchange contract not deployed to the current network. Please select another network with Metamask.')\r\n      return null\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////// LOADING ORDERS\r\n  export const loadAllOrders = async (exchange, dispatch, token) => {\r\n    // cacelled orders\r\n    const cancelStream = await exchange.getPastEvents('Cancel', { fromBlock: 0, toBlock: 'latest'})\r\n    //format cancelled orders\r\n    const cancelledOrders = cancelStream.map((event) => event.returnValues)\r\n    // add cancel order to the redux store  ///////////////////////////////////////////////////////// REFORMAT HERE\r\n    let cancelledOrderCount = 0\r\n    let cancelledOrdersOnToken = []\r\n    cancelledOrders.forEach(element => {\r\n     if( (element.tokenGive === token.options.address) || (element.tokenGet === token.options.address)) {\r\n      cancelledOrdersOnToken[cancelledOrderCount] = element\r\n      cancelledOrderCount =+1\r\n     }\r\n    });\r\n    dispatch( totalOrdersCancelled(cancelledOrders) )\r\n    dispatch(cancelledOrdersLoaded(cancelledOrdersOnToken))\r\n    // filled orders\r\n    const tradeStream = await exchange.getPastEvents('Trade', { fromBlock: 0, toBlock: 'latest'})\r\n    const filledOrders = tradeStream.map((event) => event.returnValues)\r\n    //////////////////////////////////////////////////////////////////////////////////////////////// REFORMAT HERE\r\n    let filledOrderCount = 0\r\n    let filledOrdersOnToken = []\r\n    filledOrders.forEach(element => {\r\n     if( (element.tokenGive === token.options.address) || (element.tokenGet === token.options.address)) {\r\n      filledOrdersOnToken[filledOrderCount] = element\r\n      filledOrderCount =+1\r\n     }\r\n    });\r\n    dispatch(totalOrdersFilled(filledOrders))\r\n    dispatch(filledOrdersLoaded(filledOrdersOnToken))\r\n    //all orders\r\n    const orderStream = await exchange.getPastEvents('Order', { fromBlock: 0, toBlock: 'latest'})\r\n\r\n    const allOrders = orderStream.map((event) => event.returnValues)\r\n    let allOrderCount = 0\r\n    let allOrdersOnToken = []\r\n  // console.log('ALL OREDERS BEFORE : ',allOrders)\r\n\r\n    allOrders.forEach(element => {\r\n     if( (element.tokenGive === token.options.address) || (element.tokenGet === token.options.address)) {\r\n      allOrdersOnToken[allOrderCount] = element\r\n     // console.log('ELEMENT : ',element)\r\n      //console.log('ORDER tokenGive : ',element.tokenGive)\r\n      allOrderCount +=1\r\n\r\n     }\r\n\r\n    });\r\n    //console.log('ALL OREDERS AFTER : ',allOrdersOnToken)\r\n    dispatch(totalOrdersLoaded(allOrders))\r\n    dispatch(allOrdersLoaded(allOrdersOnToken))\r\n    //console.log(allOrders)\r\n  }\r\n// LOADING TOKENS\r\n\r\nexport const loadAllTokens = async (exchange, dispatch) => {\r\n  const result = await exchange.getPastEvents('OtherToken', {fromBlock:0, toBlock: 'latest'});\r\n  const allTokens = result.map((event) => event.returnValues);\r\n //console.log('RESULT : ',allTokens )\r\n  await Promise.all(allTokens.map(async (element) => {\r\n    const innerResult = await exchange.methods.getERCsymbol(element.tokenAddress).call();\r\n    element.symbol = innerResult;\r\n    element[2]= innerResult;\r\n  }));\r\n\r\n  dispatch(allTokensLoaded(allTokens));\r\n}\r\n \r\n// EVENTS\r\nexport const subscribeToEvents = async (exchange, dispatch) => {\r\n  exchange.events.Cancel({}, (error,event) => {\r\n    dispatch(orderCancelled(event.returnValues))\r\n  })\r\n  exchange.events.Trade({}, (error,event) => {\r\n    dispatch(orderFilled(event.returnValues))\r\n  })\r\n  exchange.events.Deposit({}, (error,event) => {\r\n    dispatch(balancesLoaded())\r\n    \r\n  })\r\n  exchange.events.Withdraw({}, (error,event) => {\r\n    dispatch(balancesLoaded())\r\n  })\r\n  exchange.events.Order({}, (error,event) => {\r\n    dispatch(orderMade(event.returnValues))\r\n  })\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////// CANCEL ORDER\r\nexport const cancelOrder = (dispatch, exchange, order, account) => {\r\n  exchange.methods.cancelOrder(order.id).send({ from: account })\r\n  .on('transcationHash', (hash) => {\r\n    dispatch(orderCancelling())\r\n\r\n  })\r\n  .on('error', (error) => {\r\n    console.log(error)\r\n    window.alert('there was an error cancelling')\r\n  })\r\n}\r\n////////////////////////////////////////////////////////////////////// FILL ORDER\r\nexport const fillOrder = async (dispatch, exchange, order, account, exchangeTokenBalance, exchangeEtherBalance, symbol, web3, token) => {\r\n  dispatch(balancesLoading())\r\n\r\n // let decimals = await token.methods.decimals().call\r\n  let amount = order.amountGet /(10**18)\r\n  let amountGive = order.amountGive /(10**18)\r\n  console.log('AMOUNT GET BY SELLER:',amount)\r\n  console.log('AMOUNT PAYED BY BUYER:',amountGive)\r\n  //let feeAmount = (amount * feePercent) / 100\r\n  let balance\r\n\r\n  // check the balance\r\n  if(order.tokenGet === ETHER_ADDRESS){\r\n    balance = await exchangeEtherBalance\r\n   \r\n  } else {\r\n    balance = await exchangeTokenBalance\r\n  }\r\n   console.log('SELLER GET : ',order.tokenGet)\r\n   console.log('BUYER PAYES : ',order.tokenGive)\r\n   console.log('BALANCE : ', balance)\r\n  // console.log('AMOUNT : ',amount)\r\n  // console.log('FEE AMOUNT : ',feeAmount)\r\n  console.log('EVAL : ',amount > balance && order.tokenGet === ETHER_ADDRESS)\r\n\r\n if (amount > balance && order.tokenGet === ETHER_ADDRESS) {\r\n  const data = {\r\n    msg: 'Insuficient Balance', \r\n    desc: 'Not enough Ether in your account to fill the order. Please deposit some Ether. Your curently have '+balance+' Ether on the exchange.'}\r\n    dispatch(warningLoaded(data))\r\ndispatch(balancesLoaded())\r\n} else if (amount > balance && order.tokenGet !== ETHER_ADDRESS) {\r\n   const data = {\r\n    msg: 'Insuficient Balance', \r\n    desc: 'Not enough '+ symbol +' in your account to fill the order. Please deposit some '+ symbol +'. Your curently have '+balance+' '+symbol+' on the exchange.'}\r\n    dispatch(warningLoaded(data))\r\ndispatch(balancesLoaded())\r\n} else {\r\n  exchange.methods.fillOrder(order.id).send({ from: account })\r\n  .on('transcationHash', (hash) => {\r\n    dispatch(orderFilling())\r\n\r\n  })\r\n  .on('error', (error) => {\r\n    console.log(error)\r\n    window.alert('There was an error filling your order')\r\n    dispatch(balancesLoaded())\r\n  }).then( async () =>{\r\n    loadBalances(dispatch, web3, exchange, token, account) \r\n })\r\n}\r\n}\r\n///////////////////////////////////////////////////////////////// LOADING BALANCES\r\nexport const loadBalances = async (dispatch, web3, exchange, token, account) => {\r\n\r\n  // ETHER BALANCE IN WALLET\r\n  const etherBalance = await web3.eth.getBalance(account)\r\n  const ebalance = web3.utils.fromWei(etherBalance, 'ether')\r\n\r\n  dispatch(etherBalanceLoaded(ebalance))\r\n  // TOKEN BALANCE IN WALLET\r\n  const tokenBalance = await token.methods.balanceOf(account).call()\r\n  const tbalance = web3.utils.fromWei(tokenBalance, 'ether')\r\n  dispatch(tokenBalanceLoaded(tbalance))\r\n    // ETHER BALANCE IN Exchange\r\n    const exchangeEtherBalance = await exchange.methods.balanceOf(ETHER_ADDRESS, account).call()\r\n    const xebalance = web3.utils.fromWei(exchangeEtherBalance, 'ether')\r\n    dispatch(exchangeEtherBalanceLoaded(xebalance))\r\n      // TOKEN BALANCE IN WALLET\r\n  const exchangeTokenBalance = await exchange.methods.balanceOf(token.options.address, account).call()\r\n  const xtbalance = web3.utils.fromWei(exchangeTokenBalance, 'ether')\r\n  dispatch(exchangeTokenBalanceLoaded(xtbalance))\r\n\r\n  /// ALL BALANCE LOADED\r\n  dispatch(balancesLoaded())\r\n\r\n}\r\n\r\n///////////////////////////////////////////////////////////////////////// DEPOSITING & WITHDRAWING\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////DEPOSIT ETHER\r\nexport const depositEther = async (dispatch, exchange, web3, amount, account, token) => {\r\n  dispatch(balancesLoading())\r\n  web3.eth.getBalance(account,function(error,result){\r\n\r\n    if(error){\r\n       console.log(error)\r\n    }\r\n    else{\r\n       let balance = web3.utils.fromWei(result, 'ether')\r\n       if(amount > balance){\r\n        const data = {       \r\n                    msg: 'Insuficient Balance', \r\n                    desc: 'You dont have this amount of Ether in your wallet. You have '+balance+' Ether'}\r\n                    dispatch(warningLoaded(data))\r\n                    dispatch(balancesLoaded())\r\n        } else {\r\n        exchange.methods.depositEther().send({ from: account, value: web3.utils.toWei(amount, 'ether')})\r\n         .on('transactionHash',(hash) => {  \r\n         })\r\n         .on('error', (error) => {\r\n           //console.log(error)\r\n           const data = {     \r\n            msg: error, \r\n            desc: error}\r\n            dispatch(warningLoaded(data))\r\n            dispatch(balancesLoaded())\r\n         }).then( async () =>{\r\n          loadBalances(dispatch, web3, exchange, token, account) \r\n       })\r\n       }\r\n    }\r\n })\r\n\r\n \r\n \r\n }\r\n \r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////WITHDRAW ETHER\r\nexport const withdrawEther = async (dispatch, exchange, web3, amount, account, token, orders, totalOrders, myTotalOpenOrders) => {\r\n  dispatch(balancesLoading())\r\n  let decimals = await token.methods.decimals().call()\r\n  let balance = await exchange.methods.balanceOf(ETHER_ADDRESS,account).call()\r\n  balance = web3.utils.fromWei(balance, 'ether')\r\nconsole.log('TOTAL OPEN ORDERS : ',myTotalOpenOrders)\r\n // Check if there is open orders for the token\r\n let totalEtherInOrder = 0\r\n let totalToWithdraw\r\n var asOpenOrders \r\n \r\n myTotalOpenOrders.forEach(order => {\r\n   // he ass sell orders for token\r\n   if(order.tokenGive === ETHER_ADDRESS ){\r\n     asOpenOrders = true\r\n     // add order amount to total\r\n     console.log(order)\r\n     totalEtherInOrder += order.etherAmount\r\n     console.log('TOTAL ETHER IN ORDERS',totalEtherInOrder)\r\n     console.log('DECIMALS : ',decimals)\r\n\r\n\r\n   }\r\n });\r\n totalToWithdraw = balance - totalEtherInOrder\r\n    console.log('BALANCE : ', balance)\r\n    console.log('AMOUNT : ', amount)\r\n    if(amount > totalToWithdraw ){\r\n      console.log('TOTAL TO WITHDRAW :',totalToWithdraw)\r\n      if(asOpenOrders === true){ \r\n        console.log(asOpenOrders)\r\n        const data= {\r\n                    \r\n                     msg: 'You have open orders', \r\n                     desc: 'You have '+totalEtherInOrder+' Ether in open order(s). Please lower the amount you wish to withdraw or cancel your order(s). You curently have '+totalToWithdraw +' Ether Available to withdraw.'}\r\n                     dispatch(warningLoaded(data))\r\n      } else {\r\n        \r\n        const data = {\r\n                     msg: 'Insuficient Balance', \r\n                     desc: 'You dont have this amount of Ether in your account. You have '+balance+' Ether'}\r\n                     dispatch(warningLoaded(data))\r\n      }\r\n      dispatch(balancesLoaded())\r\n    \r\n    } else {\r\n\r\n    exchange.methods.withdrawEther(web3.utils.toWei(amount, 'ether')).send({ from: account })\r\n    .on('transactionHash',(hash) =>  {\r\n      \r\n      \r\n    })\r\n    .on('error', (error) => {\r\n      dispatch(balancesLoaded())\r\n      console.log(error) // log any remaining error in console\r\n    }).then( async () =>{\r\n      loadBalances(dispatch, web3, exchange, token, account) \r\n   })\r\n  }\r\n}\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////DEPOSIT TOKEN\r\nexport const depositToken = async (dispatch, exchange, web3, token, amount, account) => {\r\n  dispatch(balancesLoading())\r\n\r\n  console.log('DEPOSITING : ', token.options.address)\r\n  //let decimals = await token.methods.decimals().call()\r\n  let symbol = await token.methods.symbol().call()\r\n  let balance = await token.methods.balanceOf(account).call()\r\n  balance = web3.utils.fromWei(balance, 'ether')\r\n    console.log('BALANCE : ', balance)\r\n    console.log('AMOUNT : ', amount)\r\n    balance = parseInt(balance) \r\n    amount = parseInt(amount)\r\n\r\n  if(amount > balance){\r\n    \r\n    const data = {msg: 'Insuficient Balance', desc: 'You dont have this amount of '+symbol+' in your wallet. You have '+balance+' '+symbol}\r\n    dispatch(warningLoaded(data))\r\n    dispatch(balancesLoaded())\r\n  } else {\r\n    amount = amount.toString()\r\n    amount = web3.utils.toWei(amount, 'ether')\r\n    token.methods.approve(exchange.options.address, amount).send({ from: account })\r\n    .on('transactionHash',(hash) => {\r\n      exchange.methods.depositToken(token.options.address, amount).send({ from: account })\r\n    .on('transactionHash',(hash) => {\r\n     // dispatch(balancesLoading())\r\n   })\r\n   .on('error', (error) => {\r\n    dispatch(balancesLoaded())\r\n      console.log(error)\r\n   }).then( async () =>{\r\n   loadBalances(dispatch, web3, exchange, token, account) \r\n   })\r\n  })\r\n\r\n  }\r\n}\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////WITHDRAW TOKEN\r\nexport const withdrawToken = async (dispatch, exchange, web3, token, amount, account, symbol, orders) => {\r\n  dispatch(balancesLoading())\r\n let balance = await exchange.methods.balanceOf(token.options.address, account).call()\r\n //let decimals =await token.methods.decimals().call()\r\n balance = web3.utils.fromWei(balance, 'ether')\r\n // Check if there is open orders for the token\r\n let totalTokensInOrder = 0\r\n let totalToWithdraw\r\n var asOpenOrders \r\n orders.forEach(order => {\r\n   // he ass sell orders for token\r\n   if(order.tokenGive === token.options.address ){\r\n     asOpenOrders = true\r\n     // add order amount to total\r\n     totalTokensInOrder += parseInt(order.tokenAmount)\r\n     console.log('TOTAL TOKEN IN ORDERS',totalTokensInOrder)\r\n     //console.log(typeof(asOpenOrders))\r\n   }\r\n });\r\n //console.log(orders)\r\ntotalToWithdraw = balance - totalTokensInOrder\r\nconsole.log('AMOUNT : ',amount)\r\nconsole.log('TOTAL AVAILABLE : ',totalToWithdraw)\r\nif(amount > totalToWithdraw ){\r\n  if(asOpenOrders === true){ \r\n    const data = { \r\n                 msg: 'You have open orders', \r\n                 desc: 'You have '+totalTokensInOrder+' '+symbol+ ' in open order(s). Please lower the amount you wish to withdraw or cancel your order(s). You curently have '+totalToWithdraw+' '+symbol+' Available to withdraw.'}\r\n                 dispatch(warningLoaded(data))\r\n  } else {\r\n    console.log(asOpenOrders)\r\n    const data = { \r\n                 msg: 'Insuficient Balancex', \r\n                 desc: 'You dont have this amount of '+symbol+' in your account. You have '+balance+' '+symbol}\r\n                 dispatch(warningLoaded(data)) \r\n  }\r\n  dispatch(balancesLoaded())\r\n\r\n} else {\r\n    exchange.methods.withdrawToken(token.options.address, web3.utils.toWei(amount, 'ether')).send({ from: account })\r\n    .on('transactionHash',(hash) => {\r\n    \r\n     })\r\n    .on('error', (error) => {\r\n      dispatch(balancesLoaded())\r\n    console.log(error)\r\n    window.alert('There was an error withdrawing tokens')\r\n  }).then( async () =>{\r\n    loadBalances(dispatch, web3, exchange, token, account) \r\n })\r\n\r\n}\r\n}\r\n ///////////////////////////////////////////////////////////////////////////////////////////////////////////MAKE BUY ORDER\r\nexport const makeBuyOrder = async (dispatch, exchange, token, web3, order, account) => {\r\n  const tokenGet = token.options.address\r\n  let decimals = await token.methods.decimals().call()\r\n  let balance = await exchange.methods.balanceOf(ETHER_ADDRESS, account).call() / (10 ** decimals)\r\n  \r\n  const amountGet = web3.utils.toWei(order.amount, 'ether')\r\n  const tokenGive = ETHER_ADDRESS\r\n  const amountGive = await web3.utils.toWei((order.amount * order.price).toString(), 'ether')\r\n \r\n  if ((order.amount * order.price) > balance) {\r\n    const data = {msg: 'Insuficient Balance', desc: 'Not enough Ether in your account to execute the order. Please deposit some Ether or use a smaller amount. Your curently have '+balance+' Ether in your account.'}\r\n    dispatch(warningLoaded(data))\r\n  } else {\r\n\r\nexchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from:account })\r\n  .on('transactionHash',(hash) => {\r\n    dispatch(buyOrderMaking())\r\n  })\r\n  .on('error', (error) => {\r\n    console.log(error)\r\n    window.alert('There was an error making your buy order')\r\n  })\r\n\r\n}\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////MAKE SELL ORDER\r\nexport const makeSellOrder = async (dispatch, exchange, token, web3, order, account) => {\r\n  let decimals = await token.methods.decimals().call() \r\n  let balance = await exchange.methods.balanceOf(token.options.address, account).call() / (10 ** decimals)\r\n  const symbol = await token.methods.symbol().call()\r\n  const tokenGet = ETHER_ADDRESS\r\n  const amountGet = web3.utils.toWei((order.amount * order.price).toString(), 'ether')\r\n  const tokenGive = token.options.address\r\n  const amountGive = web3.utils.toWei(order.amount, 'ether')\r\n   if (order.amount > balance) {\r\n    const data = {\r\n                 \r\n                  msg: 'Insuficient Balance', \r\n                  desc: 'Not enough '+symbol+' in your account to execute the order. Please deposit some '+symbol+' or use a smaller amount. Your curently have '+balance+' '+symbol+' in your account.'}\r\n                  dispatch(warningLoaded(data))\r\n   } else {\r\nexchange.methods.makeOrder(tokenGet, amountGet, tokenGive, amountGive).send({ from:account })\r\n  .on('transactionHash',(hash) => {\r\n    dispatch(sellOrderMaking())\r\n  })\r\n  .on('error', (error) => {\r\n    console.log(error)\r\n    window.alert('There was an error making your sell order')\r\n  })\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/////////////////////////////////////////////////////////////// CUSTOM  BY MADEINDREAMS\r\n\r\n//// LOADING STACKS\r\n\r\nexport const loadStackData = async (stacking, dispatch, account) => {\r\n  const len = await stacking.methods.poolLength().call()\r\n  console.log(len) \r\n  let data = []\r\n  let i = 0\r\n  for(i=0;i<len;i++){\r\n     data[i] = await stacking.methods.poolInfo(i).call() \r\n     data[i]['supply']= await stacking.methods.getERCBalance(data[i].tokenStack,stacking.options.address).call()\r\n     data[i]['name']= await stacking.methods.getERCname(data[i].tokenStack).call()\r\n     data[i]['symbol']= await stacking.methods.getERCsymbol(data[i].tokenStack).call()\r\n     data[i]['stacked'] = await stacking.methods.stackingBalanceOf(i, account).call()\r\n     data[i]['pending'] = await stacking.methods.pendingIDT(i).call({from:account})\r\n  }\r\n  dispatch(stacks(data))\r\n    return data\r\n}\r\n\r\n///// STACKING\r\n\r\nexport const stackToken = async (stacking, token, account, amount, id, web3, dispatch) => {\r\n  console.log('START')\r\n  const tokenx = new web3.eth.Contract(Token.abi, token) \r\n  amount = web3.utils.toWei(amount, 'ether')\r\n  await tokenx.methods.approve(stacking.options.address, amount).send({ from: account })\r\n .on('transactionHash', async (hash) => {\r\n   console.log('IS APPROVED')\r\n }).then( async () => {\r\n  await stacking.methods.deposit(amount,id).send({from : account})\r\n  .on('transactionHash', async (hash) => {\r\n    console.log('DEPOSITED')\r\n  }).then(async () =>{\r\n    await loadStackData(stacking, dispatch, account)\r\n  })\r\n\r\n })\r\n   \r\n}\r\n\r\nexport const unStackToken = async (stacking, account, amount, id, web3, dispatch) => {\r\namount = web3.utils.toWei(amount, 'ether')\r\nawait stacking.methods.withdraw(amount,id).send({from : account})\r\n.on('transactionHash', async (hash) => {\r\n  console.log('WITHDRAWED')\r\n}).then(async () =>{\r\n  await loadStackData(stacking, dispatch, account)\r\n})\r\n}\r\n\r\n/////////////////////////////////////////////////////////////// LOADING TOKEN SYMBOL\r\nexport const loadTokenSymbol = async (token, dispatch) => {\r\n  const symbol = await token.methods.symbol().call()          \r\n    //console.log(symbol)\r\n    dispatch(tokenSymbolLoaded(symbol))\r\n    return symbol\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////POPUP\r\n\r\n\r\nexport const loadWarning = async (data, dispatch) => {\r\n  try {\r\n    } catch (error) {\r\n        alert('COULD NOT LOAD WARNING')\r\n        return\r\n    } \r\n  }\r\n\r\n  export const UnloadWarning = async (dispatch) => {\r\n          dispatch(warningAkLoaded())\r\n          return true\r\n      }\r\n\r\n/////////////////////////////////////////////////////////// ADMIN PANEL\r\n      export const CloseAdminPanel = async (dispatch) => {\r\n        dispatch(adminOff())\r\n        return true\r\n    }\r\n\r\n    export const OpenAdminPanel = async (dispatch) => {\r\n      dispatch(adminOn())\r\n      return true\r\n  }\r\n/////////////////////////////////////////////////////////// CONTENT \r\n  export const OpenContent = async (dispatch, content) => {\r\n    dispatch(contentOn())\r\n    dispatch(contentData(content))\r\n    return true\r\n}\r\n\r\n///////////////////////////////////////////////////////// Administration and user references\r\n\r\nexport const loadUser = async (exchange, account, dispatch) => {\r\n  //Checking if user is contract owner\r\nconst admin = await exchange.methods.isAdmin().call({from:account})\r\n // Dispatch the user true or false\r\ndispatch(userLoaded(admin))\r\nreturn admin\r\n}\r\n\r\n\r\nexport const registerToken = async (exchange, account, address, dispatch) =>{\r\n\r\n  await exchange.methods.registerToken(address).send({from:account})\r\n}\r\n/////////////////////////////////////////////////////////////////////////////////////QUERY TOKEN INFO PRIOR TO REGISTRATION\r\nexport const queryRegisterToken = async (exchange, account, address, dispatch) =>{\r\n\r\nif(address.length < 42 || address.length > 42 ){\r\n\r\n  console.log('NOT A VALID ADDRESS')\r\n}else {\r\n\r\n  const rTokenSymbol = await exchange.methods.getERCsymbol(address).call()\r\n  const rTokenName = await exchange.methods.getERCname(address).call()\r\n  const rTokentotalSupply = await exchange.methods.getERCtotalSupply(address).call()\r\n  const rTokenDecimals = await exchange.methods.getERCdecimals(address).call()\r\n  \r\n  const data = {\r\n    name: rTokenName,\r\n    symbol: rTokenSymbol,\r\n    totalSupply: rTokentotalSupply ,\r\n    decimals: rTokenDecimals,\r\n    address: address\r\n  }\r\n  \r\n  \r\n  console.log('TOKEN TO REGISTER : ', data)\r\n  \r\n  dispatch(queryRegisterTokenAddress(data))\r\n  dispatch(showRegisterTokenInfo())\r\n  return data\r\n}\r\n\r\n\r\n\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////// ADD A TOKEN TO METAMASK\r\n\r\n\r\nexport const addToMetamask = async (token) => {\r\n  console.log(token)\r\n  const tokenAddress = token.options.address\r\n  const tokenSymbol = await token.methods.symbol().call() \r\n  const tokenDecimals = await token.methods.decimals().call() \r\n  const tokenImage = 'https://madeindreams.ca/logo.svg';\r\n  \r\n  try {\r\n    // wasAdded is a boolean. Like any RPC method, an error may be thrown.\r\n    const wasAdded = await window.ethereum.request({\r\n      method: 'wallet_watchAsset',\r\n      params: {\r\n        type: 'ERC20', // Initially only supports ERC20, but eventually more!\r\n        options: {\r\n          address: tokenAddress, // The address that the token is at.\r\n          symbol: tokenSymbol, // A ticker symbol or shorthand, up to 5 chars.\r\n          decimals: tokenDecimals, // The number of decimals in the token\r\n          image: tokenImage, // A string url of the token logo\r\n        },\r\n      },\r\n    });\r\n  \r\n    if (wasAdded) {\r\n      console.log('Thanks for your interest!');\r\n    } else {\r\n      console.log('Your loss!');\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n}","import React, { Component } from 'react';\r\nimport  {Navbar, Nav} from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport Spinner from './Spinner'\r\nimport Identicon from 'identicon.js';\r\n\r\nimport {\r\n  \r\n  exchangeSelector, \r\n  userSelector,\r\n  accountSelector\r\n} from '../store/selectors'\r\nimport {\r\n OpenAdminPanel,\r\n OpenContent\r\n\r\n} from '../store/interactions'\r\n\r\nconst showAdminPanel = (props) => {\r\n  const { user , dispatch } = props\r\n  if(user.admin === true){\r\n    return(\r\n      <div className=\"admin-panel text-white text-xm\">\r\n      <button \r\n             className=\"btn btn-primary btn-block btn-sm btn-custom\" \r\n             onClick={() => OpenAdminPanel(dispatch)}>Admin</button>  \r\n        </div>  \r\n      \r\n    )\r\n\r\n  }\r\n\r\n  }\r\n\r\n\r\n\r\nclass Navigator extends Component {\r\n\r\n\r\n  \r\n  componentDidMount() {\r\n    this.loadBlockchainData(this.props)\r\n  }\r\n  async loadBlockchainData(props) {\r\n  \r\n  }\r\n\r\n  \r\n  \r\n  render() {\r\n    var identiconOption={\r\n      foreground: [186, 39, 127, 255],               // rgba black\r\n      background: [0, 0, 0, 255],         // rgba white\r\n      margin: 0.2,                              // 20% margin\r\n      size: 420,                                // 420px square\r\n      format: 'svg'                             // use SVG instead of PNG\r\n    };\r\n    return (\r\n\r\n<Navbar account ={this.props.account} bg=\"transparent\" variant=\"dark\" collapseOnSelect expand=\"lg\">\r\n<Navbar.Brand className=\"brand\">\r\n  <img\r\n    alt=\"Blockchain logo\"\r\n    src=\"../logo.svg\"\r\n    width=\"30\"\r\n    height=\"30\"\r\n    className=\"d-inline-block align-top brand\"\r\n  />Idecentralize\r\n</Navbar.Brand>\r\n<Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n    <Nav className=\"\">\r\n    <Nav.Link \r\n           \r\n             onClick={() => OpenContent(this.props.dispatch, 'Dex')}>DEX</Nav.Link> \r\n\r\n     <Nav.Link \r\n             \r\n             onClick={() => OpenContent(this.props.dispatch, 'Defi')}>DEFI</Nav.Link>   \r\n     <Nav.Link \r\n             \r\n             onClick={() => OpenContent(this.props.dispatch, 'Nft')}>NFT</Nav.Link>       \r\n\r\n</Nav>\r\n\r\n</Navbar.Collapse>\r\n<div>\r\n{ this.props.showAdminPanel ? showAdminPanel(this.props) : <Spinner type=\"table\" />} \r\n</div>\r\n{ this.props.account\r\n              ? <img\r\n                className='ml-2'\r\n                width='30'\r\n                height='30'\r\n                alt={this.props.account}\r\n                src={`data:image/svg+xml;base64,${new Identicon(this.props.account, identiconOption).toString()}`}\r\n              />\r\n              : <Spinner/>\r\n            }\r\n</Navbar>\r\n\r\n\r\n);\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n \r\n \r\n  return {\r\n    showAdminPanel: userSelector(state),\r\n    exchange: exchangeSelector(state),\r\n    user: userSelector(state),\r\n    account: accountSelector(state)\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navigator)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Spinner from './Spinner'\r\nimport { \r\n    filledOrdersLoadedSelector, \r\n    filledOrdersSelector,\r\n    tokenSymbolLoadedSelector \r\n} from '../store/selectors'\r\n\r\nconst showFilledOrders = (filledOrders) => {\r\n    return (\r\n        <tbody>\r\n        { filledOrders.map((order) => {\r\n            return(\r\n                <tr className={`order-${order.id}`} key={order.id}>\r\n                    <td className=\"text-muted\">{order.formattedTimestamp}</td>\r\n                    <td>{order.tokenAmount}</td>\r\n                    <td className={`text-${order.tokenPriceClass}`}>{order.tokenPrice}</td>\r\n                </tr>\r\n            )\r\n        })}\r\n      </tbody>\r\n    )\r\n\r\n}\r\n\r\nclass Trades extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"vertical\">\r\n                <div className=\"card bg-transparent text-white\">\r\n                    <div className=\"card-header\">\r\n                        Trades\r\n                     </div>\r\n                    <div className=\"card-body\">\r\n                        <table className=\"table bg-transparent text-white table-sm small\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Time</th>\r\n                                    <th>{this.props.symbol}</th>\r\n                                    <th>{this.props.symbol}/ETH</th>\r\n                                </tr>\r\n                            </thead>\r\n                            { this.props.filledOrdersLoaded ? showFilledOrders(this.props.filledOrders) : <Spinner type=\"table\" />}\r\n\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        filledOrdersLoaded: filledOrdersLoadedSelector(state),\r\n        filledOrders: filledOrdersSelector(state),\r\n        symbol: tokenSymbolLoadedSelector(state),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Trades)\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap'\r\nimport Spinner from './Spinner'\r\nimport {\r\n  orderBookSelector,\r\n  orderBookLoadedSelector,\r\n  tokenSymbolLoadedSelector,\r\n  exchangeSelector,\r\n  accountSelector,\r\n  orderFillingSelector,\r\n  exchangeTokenBalanceSelector,\r\n  exchangeEtherBalanceSelector,\r\n  web3Selector, \r\n  tokenSelector, \r\n \r\n} from '../store/selectors'\r\nimport { fillOrder } from '../store/interactions'\r\n\r\n\r\nconst renderOrder = (order, props) => {\r\n  const { dispatch, exchange, account,exchangeTokenBalance, exchangeEtherBalance, symbol, web3, token } = props\r\n  \r\n\r\n  return(\r\n   <OverlayTrigger\r\n   trigger={['hover', 'focus']}\r\n      key={order.id}\r\n      placement='top'\r\n      overlay={\r\n        <Tooltip className=\"tooltip\" id={order.id}>\r\n          {`Click to ${order.orderFillAction}`}\r\n        </Tooltip>\r\n      }\r\n    >\r\n      <tr\r\n        key={order.id}\r\n        className=\"order-book-order\"\r\n       onClick={(e) => fillOrder(dispatch, exchange, order, account,exchangeTokenBalance, exchangeEtherBalance, symbol, web3, token)}\r\n      >\r\n        <td>{order.tokenAmount}</td>\r\n        <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\r\n        <td>{order.etherAmount}</td>\r\n      </tr>\r\n    </OverlayTrigger>\r\n  )\r\n}\r\n\r\nconst showOrderBook = (props) => {\r\n  const { orderBook, symbol } = props\r\n\r\n  return(\r\n    <tbody>\r\n      {orderBook.sellOrders.map((order) => renderOrder(order, props))}\r\n      <tr>\r\n        <th>{symbol}</th>\r\n        <th>{symbol}/ETH</th>\r\n        <th>ETH</th>\r\n      </tr>\r\n      {orderBook.buyOrders.map((order) => renderOrder(order, props))}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nclass OrderBook extends Component {\r\n  render() {\r\n     // console.log(this.props.showOrderBook, this.props.orderBook)\r\n    return (\r\n      <div className=\"vertical\">\r\n        <div className=\"card bg-transparent text-white\">\r\n          <div className=\"card-header\">\r\n            Order Book\r\n          </div>\r\n          <div className=\"card-body order-book\">\r\n            <table className=\"table bg-transparent text-white table-sm small\">\r\n              { this.props.showOrderBook ? showOrderBook(this.props) : <Spinner type='table' /> }\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const orderBookLoaded = orderBookLoadedSelector(state) \r\n  const orderFilling = orderFillingSelector(state)\r\n\r\n\r\n  return {\r\n    orderBook: orderBookSelector(state),\r\n    showOrderBook: orderBookLoaded && !orderFilling,\r\n    symbol: tokenSymbolLoadedSelector(state),\r\n    exchange: exchangeSelector(state),\r\n    account: accountSelector(state),\r\n    exchangeTokenBalance: exchangeTokenBalanceSelector(state),\r\n    exchangeEtherBalance: exchangeEtherBalanceSelector(state),\r\n    token: tokenSelector(state),\r\n    web3: web3Selector(state),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(OrderBook);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Spinner from './Spinner'\r\nimport { Tabs, Tab } from 'react-bootstrap'\r\nimport {\r\n    myFilledOrdersLoadedSelector,\r\n    myFilledOrdersSelector,\r\n    myOpenOrdersLoadedSelector,\r\n    myOpenOrdersSelector,\r\n    tokenSymbolLoadedSelector,\r\n    exchangeSelector,\r\n    accountSelector,\r\n    orderCancellingSelector, \r\n    \r\n    \r\n} from '../store/selectors'\r\nimport { cancelOrder } from '../store/interactions'\r\n\r\nconst showMyFilledOrders = (props) => {\r\n  const { myFilledOrders } = props\r\n    return(\r\n      <tbody>\r\n        { myFilledOrders.map((order) => {\r\n          return (\r\n            <tr key={order.id}>\r\n              <td className=\"text-muted\">{order.formattedTimestamp}</td>\r\n              <td className={`text-${order.orderTypeClass}`}>{order.orderSign}{order.tokenAmount}</td>\r\n              <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\r\n            </tr>\r\n          )\r\n        }) }\r\n      </tbody>\r\n    )\r\n  }\r\n  \r\n  const showMyOpenOrders = (props) => {\r\n    const { myOpenOrders, dispatch, exchange, account } = props\r\n    return(\r\n      <tbody>\r\n        { myOpenOrders.map((order) => {\r\n          return (\r\n            <tr key={order.id}>\r\n              <td className={`text-${order.orderTypeClass}`}>{order.tokenAmount}</td>\r\n              <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\r\n              <td\r\n               className=\"cancel-order\"\r\n               onClick = {(e) => {\r\n                 cancelOrder(dispatch, exchange, order, account)\r\n               }}\r\n\r\n              >&#8864;</td>\r\n            </tr>\r\n          )\r\n        }) }\r\n      </tbody>\r\n    )\r\n  }\r\n  \r\n  \r\n\r\nclass MyTransactions extends Component {\r\n  render() {\r\n  \r\n    return (\r\n        <div className=\"card bg-transparent text-white\">\r\n        <div className=\"card-header\">\r\n          My Transactions\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <Tabs defaultActiveKey=\"trades\" className=\"text-white tabs\">\r\n            <Tab eventKey=\"trades\" title=\"Trades\" className=\"bg-transparent tabs\">\r\n              <table className=\"table bg-transparent text-white table-sm small\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Time</th>\r\n                    <th>\r\n                    {this.props.symbol}\r\n                    </th>\r\n                    <th>{this.props.symbol}/ETH</th>\r\n                  </tr>\r\n                </thead>\r\n                { this.props.showMyFilledOrders ? showMyFilledOrders(this.props) : <Spinner type=\"table\" />} \r\n              </table>\r\n            </Tab>\r\n            <Tab eventKey=\"orders\" title=\"Orders\" className=\"text-white tabs\">\r\n              <table className=\"table bg-transparent text-white table-sm small\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Amount</th>\r\n                    <th>{this.props.symbol}/ETH</th>\r\n                    <th>Cancel</th>\r\n                  </tr>\r\n                </thead>\r\n                { this.props.showMyOpenOrders ? showMyOpenOrders(this.props) : <Spinner type=\"table\" />}\r\n              </table>\r\n            </Tab>\r\n          </Tabs>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n const myOpenOrdersLoaded = myOpenOrdersLoadedSelector(state)\r\n const orderCancelling = orderCancellingSelector(state)\r\n \r\n  return {\r\n    myFilledOrders: myFilledOrdersSelector(state),\r\n    showMyFilledOrders: myFilledOrdersLoadedSelector(state),\r\n    myOpenOrders: myOpenOrdersSelector(state),\r\n    showMyOpenOrders: myOpenOrdersLoaded && !orderCancelling,\r\n    exchange: exchangeSelector(state),\r\n    account: accountSelector(state),\r\n    symbol: tokenSymbolLoadedSelector(state),\r\n   \r\n    \r\n  }\r\n}\r\nexport default connect(mapStateToProps)(MyTransactions);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export const chartOptions = {\r\n  plotOptions: {\r\n    candlestick: {\r\n      colors: {\r\n        upward: '#15f45f',\r\n        downward: '#ba277f'\r\n      },\r\n      wick: {\r\n        useFillColor: true,\r\n      }\r\n    }\r\n  },\r\n  chart: {\r\n    animations: { enabled: false },\r\n    foreColor: \"#000\",\r\n    toolbar: { \r\n      show: true, \r\n      theme:'dark',\r\n      colors:'#000',\r\n    },\r\n    width: '100px'\r\n  },\r\n  tooltip: {\r\n    enabled: true,\r\n    theme: false,\r\n    colors:'#000',\r\n    \r\n    style: {\r\n      fontSize: '12px',\r\n      fontFamily: undefined\r\n    },\r\n    x: {\r\n        show: true,\r\n        format: 'dd MMM',\r\n        formatter: undefined,\r\n    },\r\n    y: {\r\n      show: true,\r\n      title: 'price',\r\n    },\r\n    marker: {\r\n      show: false,\r\n    },\r\n    items: {\r\n       display: 'flex',\r\n    },\r\n    fixed: {\r\n        enabled: false,\r\n        position: 'topRight',\r\n        offsetX: 0,\r\n        offsetY: 0,\r\n    },\r\n  },\r\n  xaxis: {\r\n    type: 'datetime',\r\n    labels: {\r\n      show: true,\r\n      style: {\r\n          colors: '#fff',\r\n          fontSize: '8px',\r\n          cssClass: 'apexcharts-xaxis-label',\r\n      },\r\n    },\r\n  },\r\n  yaxis: {\r\n    labels: {\r\n      show: true,\r\n      minWidth: 0,\r\n      maxWidth: 160,\r\n      style: {\r\n        colors: '#ffffff',\r\n        fontSize: '10px',\r\n        cssClass: 'apexcharts-yaxis-label',\r\n      },\r\n      offsetX: 0,\r\n      offsetY: 0,\r\n      rotate: 0,\r\n    }\r\n  }\r\n\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Chart from 'react-apexcharts'\r\nimport Spinner from './Spinner'\r\nimport { chartOptions} from './PriceChart.config'\r\nimport {\r\n  priceChartLoadedSelector,\r\n  priceChartSelector,\r\n  tokenSymbolLoadedSelector\r\n} from '../store/selectors'\r\n\r\nconst priceSymbol = (lastPriceChange) => {\r\n  let output\r\n  if(lastPriceChange === '+') {\r\n    output = <span className=\"text-success\">&#9650;</span> // Green up tiangle\r\n  } else {\r\n    output = <span className=\"text-danger\">&#9660;</span> // Red down triangle\r\n  }\r\n  return(output)\r\n}\r\n\r\nclass PriceChart extends Component {\r\n\r\n  showPriceChart = (priceChart) => {\r\n  \r\n    \r\n     return(\r\n       <div className=\"price-chart \">\r\n         <div className=\"price\">\r\n           <h4 className=\"pricecharth4\">\r\n             {this.props.symbol}/ETH &nbsp; {priceSymbol(priceChart.lastPriceChange)} &nbsp; {priceChart.lastPrice}\r\n             </h4>\r\n             \r\n         </div>\r\n         <Chart className=\"chart\" options={chartOptions} series={priceChart.series} type='candlestick' width={'100%'} height={'100%'} />\r\n       </div>\r\n     )\r\n   }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card bg-transparent \">\r\n        \r\n        <div className=\"card-body \" >\r\n          \r\n          {this.props.priceChartLoaded ? this.showPriceChart(this.props.priceChart) : <Spinner />}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  \r\n  \r\n  return {\r\n    \r\n    priceChartLoaded: priceChartLoadedSelector(state),\r\n    priceChart: priceChartSelector(state),\r\n    symbol: tokenSymbolLoadedSelector(state),\r\n    \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(PriceChart)","\r\nimport React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Spinner from './Spinner'\r\nimport { Tabs, Tab } from 'react-bootstrap'\r\n\r\nimport { \r\n    tokenSymbolLoadedSelector,\r\n    web3Selector, \r\n    exchangeSelector, \r\n    tokenSelector, \r\n    accountSelector,\r\n    etherBalanceSelector,\r\n    tokenBalanceSelector,\r\n    exchangeEtherBalanceSelector,\r\n    exchangeTokenBalanceSelector,\r\n    balancesLoadingSelector, \r\n    etherDepositAmountSelector,\r\n    etherWithdrawAmountSelector,\r\n    tokenDepositAmountSelector,\r\n    tokenWithdrawAmountSelector,\r\n    myOpenOrdersSelector,\r\n    myTotalOpenOrdersSelector,\r\n    totalOrdersLoadedSelector\r\n    \r\n    \r\n} from '../store/selectors'\r\nimport {loadBalances,\r\n        depositEther,\r\n        withdrawEther,\r\n        depositToken,\r\n        withdrawToken\r\n} from '../store/interactions'\r\nimport { \r\n         etherDepositAmountChanged,\r\n         etherWithdrawAmountChanged,\r\n         tokenDepositAmountChanged,\r\n         tokenWithdrawAmountChanged,\r\n\r\n} from '../store/actions'\r\n\r\nconst showBalance = (balance) => {\r\n//balance = Math.round(parseFloat(balance)).toFixed(5)\r\nbalance = Math.round((balance) * 1000) / 1000\r\nreturn balance\r\n}\r\n\r\nconst showForm =  (props) => {\r\n    const {\r\n        etherBalance,\r\n        tokenBalance,\r\n        exchangeEtherBalance,\r\n        exchangeTokenBalance,\r\n        symbol,\r\n        dispatch,\r\n        etherDepositAmount,\r\n        etherWithdrawAmount,\r\n        tokenDepositAmount,\r\n        tokenWithdrawAmount,\r\n        web3,\r\n        token,\r\n        account,\r\n        exchange, \r\n        myOpenOrders,\r\n        myTotalOpenOrders,\r\n        totalOrders\r\n    } = props\r\n    return (\r\n    <Tabs defaultActiveKey=\"deposit\" className=\" text-white\">\r\n\r\n        <Tab eventKey=\"deposit\" title=\"Deposit\" className=\"bg-transparent\">\r\n            <table className=\"table bg-transparent text-white table-sm small\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Token</th>\r\n                        <th>Wallet</th>\r\n                        <th>Exchange</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <th>ETH</th>\r\n                        <th>{  showBalance(etherBalance) }</th>\r\n                        <th>{ showBalance(exchangeEtherBalance)   }</th>\r\n                    </tr>\r\n                    </tbody>\r\n               </table>\r\n\r\n               <form className =\"row\" onSubmit={(event) => {\r\n                event.preventDefault()\r\n\r\n                depositEther(dispatch, exchange, web3, etherDepositAmount, account, token)\r\n                \r\n                \r\n            }}>\r\n                <div className=\"col-12 col-sm pr-sm-2\">\r\n                    <input\r\n                     type=\"number\"\r\n                     min=\"0.000000000000000001\"\r\n                     step=\"0.000000000000000001\"\r\n                    placeholder=\"ETH Amount\"\r\n                    onChange={(e) => dispatch(etherDepositAmountChanged(e.target.value))}\r\n                    className=\"form-control form-control-sm bg-transparent text-white\"\r\n                    required\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-sm-auto pl-sm-0\">\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm btn-custom\">Deposit</button>\r\n\r\n                </div>\r\n            </form>\r\n\r\n               <table className=\"table bg-transparent text-white table-sm small\">\r\n                   <tbody>\r\n                    <tr>\r\n                        <th>{ symbol }</th>\r\n                        <th>{ showBalance(tokenBalance) }</th>\r\n                        <th>{ showBalance(exchangeTokenBalance) }</th>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <form className =\"row\" onSubmit={(event) => {\r\n                event.preventDefault()\r\n                depositToken(dispatch, exchange, web3, token, tokenDepositAmount, account)\r\n                \r\n                \r\n            }}>\r\n                <div className=\"col-12 col-sm pr-sm-2\">\r\n                    <input\r\n                     type=\"number\"\r\n                     min=\"0.000000000000000001\"\r\n                     step=\"0.000000000000000001\"\r\n                    placeholder={`${symbol} Amount`}\r\n                    onChange={(e) => dispatch(tokenDepositAmountChanged(e.target.value))}\r\n                    className=\"form-control form-control-sm bg-transparent text-white\"\r\n                    required\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-sm-auto pl-sm-0\">\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm btn-custom\">Deposit</button>\r\n\r\n                </div>\r\n            </form>\r\n\r\n        </Tab>\r\n\r\n        <Tab eventKey=\"withdraw\" title=\"Withdraw\" className=\"bg-transparent text-white\">\r\n        <table className=\"table bg-transparent text-white table-sm small\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Token</th>\r\n                        <th>Wallet</th>\r\n                        <th>Exchange</th>\r\n                    </tr>\r\n                </thead>\r\n             <tbody>\r\n                    <tr>\r\n                        <th>ETH</th>\r\n                        <th>{ etherBalance }</th>\r\n                        <th>{ exchangeEtherBalance }</th>\r\n                    </tr>\r\n                </tbody>    \r\n                </table>\r\n\r\n\r\n                    <form className =\"row\" onSubmit={(event) => {\r\n                event.preventDefault()\r\n                withdrawEther(dispatch, exchange, web3, etherWithdrawAmount, account, token, myOpenOrders, totalOrders, myTotalOpenOrders)\r\n                \r\n                \r\n                \r\n            }}>\r\n                <div className=\"col-12 col-sm pr-sm-2\">\r\n                    <input\r\n                    type=\"number\"\r\n                    min=\"0.000000000000000001\"\r\n                    step=\"0.000000000000000001\"\r\n                    placeholder=\"ETH Amount\"\r\n                    onChange={(e) => dispatch(etherWithdrawAmountChanged(e.target.value))}\r\n                    className=\"form-control form-control-sm bg-transparent text-white\"\r\n                    required\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-sm-auto pl-sm-0\">\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm btn-custom\">Withdraw</button>\r\n\r\n                </div>\r\n            </form>\r\n\r\n\r\n            <table className=\"table bg-transparent text-white table-sm small\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th>{ symbol }</th>\r\n                        <th>{ tokenBalance }</th>\r\n                        <th>{ exchangeTokenBalance }</th>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <form className =\"row\" onSubmit={(event) => {\r\n                event.preventDefault()\r\n                withdrawToken(dispatch, exchange, web3, token, tokenWithdrawAmount, account, symbol, myOpenOrders)\r\n                \r\n                \r\n            }}>\r\n                <div className=\"col-12 col-sm pr-sm-2\">\r\n                    <input\r\n                    type=\"number\"\r\n                    min=\"0.000000000000000001\"\r\n                    step=\"0.000000000000000001\"\r\n                    placeholder={`${symbol} Amount`}\r\n                    onChange={(e) => dispatch(tokenWithdrawAmountChanged(e.target.value))}\r\n                    className=\"form-control form-control-sm bg-transparent text-white\"\r\n                    required\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-sm-auto pl-sm-0\">\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm btn-custom\">Withdraw</button>\r\n\r\n                </div>\r\n            </form>\r\n\r\n\r\n        </Tab>\r\n\r\n    </Tabs>\r\n    )\r\n}\r\n\r\nclass Balance extends Component {\r\n    componentDidMount() {\r\n        this.loadBlockchainData()\r\n    }\r\n\r\n    async loadBlockchainData(){\r\n        \r\n      const { dispatch, web3, exchange, token, account } = this.props\r\n        await loadBalances(dispatch, web3, exchange, token, account )\r\n    }\r\n    render() {\r\n        return (\r\n \r\n\r\n <div className=\"card bg-transparent text-white\">\r\n <div className=\"card-header\">\r\n   Balance\r\n </div>\r\n <div className=\"card-body\">\r\n  {this.props.showForm ? showForm(this.props) : <Spinner />}\r\n \r\n </div>\r\n</div>\r\n   \r\n   )\r\n}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    const balancesLoading = balancesLoadingSelector(state)\r\n    \r\n    //console.log('BALANCES LOADING ' ,balancesLoading)\r\n\r\n   \r\n    return {\r\n      \r\n        symbol: tokenSymbolLoadedSelector(state),\r\n        exchange: exchangeSelector(state),\r\n        account: accountSelector(state),\r\n        token: tokenSelector(state),\r\n        web3: web3Selector(state),\r\n        etherBalance: etherBalanceSelector(state),\r\n        tokenBalance: tokenBalanceSelector(state),\r\n        exchangeEtherBalance: exchangeEtherBalanceSelector(state),\r\n        exchangeTokenBalance: exchangeTokenBalanceSelector(state),\r\n        balancesLoading,\r\n        showForm:  !balancesLoading,\r\n        etherDepositAmount: etherDepositAmountSelector(state),\r\n        etherWithdrawAmount: etherWithdrawAmountSelector(state),\r\n        tokenDepositAmount: tokenDepositAmountSelector(state),\r\n        tokenWithdrawAmount: tokenWithdrawAmountSelector(state),\r\n        myOpenOrders: myOpenOrdersSelector(state),\r\n        myTotalOpenOrders: myTotalOpenOrdersSelector(state),\r\n        totalOrders:totalOrdersLoadedSelector(state)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Balance)","\r\nimport React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport Spinner from './Spinner'\r\nimport { Tabs, Tab } from 'react-bootstrap'\r\n\r\nimport { \r\n    tokenSymbolLoadedSelector,\r\n    exchangeSelector,\r\n    accountSelector,\r\n    web3Selector,\r\n    buyOrderSelector,\r\n    sellOrderSelector, \r\n    tokenSelector\r\n} from '../store/selectors'\r\n\r\nimport{\r\n    buyOrderAmountChanged,\r\n    buyOrderPriceChanged,\r\n    sellOrderAmountChanged,\r\n    sellOrderPriceChanged\r\n} from '../store/actions'\r\n\r\nimport{\r\n    makeBuyOrder,\r\n    makeSellOrder\r\n} from '../store/interactions'\r\nconst showForm = (props) => {\r\n  const {\r\n    dispatch,\r\n    buyOrder,\r\n    exchange,\r\n    token,\r\n    web3,\r\n    account,\r\n    sellOrder,\r\n    symbol,\r\n    showBuyTotal,\r\n    showSellTotal\r\n   \r\n  } = props\r\n  return(\r\n    <Tabs className=\"selltabs\" defaultActiveKey=\"buy\" >\r\n      <Tab eventKey=\"buy\" title=\"Buy\" className=\"bg-transparent text-success\">\r\n      <form onSubmit={(event) => {\r\n            event.preventDefault()\r\n            makeBuyOrder(dispatch, exchange, token, web3, buyOrder, account)\r\n          }}>\r\n          <div className=\"form-group small\">\r\n            <label >Buy Amount ({symbol})</label>\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"number\"\r\n                min=\"0.000000000000000001\"\r\n                step=\"0.000000000000000001\"\r\n                className=\"form-control form-control-sm bg-transparent text-white\"\r\n                placeholder=\"Buy Amount\"\r\n            \r\n                \r\n                onChange={(e) => dispatch( buyOrderAmountChanged( e.target.value ) )}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group small\">\r\n            <label >Buy Price</label>\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"number\"\r\n                min=\"0.000000000000000001\"\r\n                step=\"0.000000000000000001\"\r\n                className=\"form-control form-control-sm bg-transparent text-white\"\r\n                placeholder=\"Buy Price\"\r\n                onChange={(e) => dispatch( buyOrderPriceChanged( e.target.value ) )}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n          <button type=\"submit\" className=\"btn btn-primary btn-sm btn-block btn-custom\">Buy Order</button>\r\n          </div>\r\n          <div>\r\n          { showBuyTotal ? <small>Total: {((((buyOrder.amount * buyOrder.price) * 10000000000000000) / 10000000000000000).toFixed(16).replace(/\\.?0+$/,\"\")).toString()} ETH</small> : null }\r\n          </div>\r\n        </form>\r\n\r\n\r\n      </Tab>\r\n      <Tab eventKey=\"sell\" title=\"Sell\" className=\"bg-transparent text-danger\">\r\n\r\n     \r\n      <form onSubmit={(event) => {\r\n            event.preventDefault()\r\n            makeSellOrder(dispatch, exchange, token, web3, sellOrder, account)\r\n          }}>\r\n          <div className=\"form-group small\">\r\n            <label>Sell Amount({symbol})</label>\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control form-control-sm bg-transparent text-white\"\r\n                placeholder=\"Sell Amount\"\r\n                onChange={(e) => dispatch( sellOrderAmountChanged( e.target.value ) )}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group small\">\r\n            <label>Sell Price</label>\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control form-control-sm bg-transparent text-white\"\r\n                placeholder=\"Sell Price\"\r\n                onChange={(e) => dispatch( sellOrderPriceChanged( e.target.value ) )}\r\n                required\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n          <button type=\"submit\" className=\"btn btn-primary btn-sm btn-block btn-custom\">Sell Order</button>\r\n          </div>\r\n          <div>\r\n          {/* { showSellTotal ? <small>Total:  { (( (sellOrder.amount * sellOrder.price) * 100000) / 100000 ).toFixed(5)   } ETH</small> : null } */}\r\n          { showSellTotal ? <small>Total: {((((sellOrder.amount * sellOrder.price) * 100000000000000000) / 100000000000000000).toFixed(16).replace(/\\.?0+$/,\"\")).toString()} ETH</small> : null }\r\n          </div>\r\n        </form>\r\n        </Tab>\r\n    </Tabs>\r\n\r\n  )\r\n}\r\n\r\nclass NewOrder extends Component {\r\n   render() {\r\n      return (\r\n \r\n<div className=\"card bg-transparent text-white\">\r\n    <div className=\"card-header\">\r\n      New Order\r\n    </div>\r\n    <div className=\"card-body\">\r\n    {this.props.showForm ? showForm(this.props) : <Spinner />}\r\n     \r\n    </div>\r\n  </div>\r\n   \r\n   )\r\n}\r\n}\r\n\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n\r\n  const buyOrder = buyOrderSelector(state)\r\n  const sellOrder = sellOrderSelector(state)\r\n  \r\n   \r\n    return {\r\n      \r\n        symbol: tokenSymbolLoadedSelector(state),\r\n        account: accountSelector(state),\r\n        exchange: exchangeSelector(state),\r\n        token: tokenSelector(state),\r\n        web3: web3Selector(state),\r\n        buyOrder,\r\n        sellOrder,\r\n        showForm: !buyOrder.making && !sellOrder.making,\r\n        showBuyTotal: buyOrder.amount && buyOrder.price,\r\n        showSellTotal: sellOrder.amount && sellOrder.price\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(NewOrder)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap'\r\nimport Spinner from './Spinner'\r\nimport {\r\n  allTokensLoadedSelector,\r\n  allTokensSelector,\r\n  web3Selector,\r\n  exchangeSelector,\r\n  accountSelector,\r\n  tokenSymbolLoadedSelector,\r\n  tokenSelector\r\n} from '../store/selectors'\r\nimport { addToMetamask, loadToken } from '../store/interactions'\r\n\r\nconst showTokens = ( props) => {\r\n const {allTokens, dispatch, exchange, web3, account } = props\r\n \r\n     return (\r\n   \r\n         <tbody>\r\n\r\n           {allTokens.map( (token)  => {\r\n            return(\r\n              <OverlayTrigger\r\n                trigger={['hover', 'focus']}\r\n                 key={token.tokenId}\r\n                 placement='top'\r\n                 overlay={\r\n                  <Tooltip className=\"tooltip\" id={token.TokenId}>\r\n                     {`Click to load ${token.symbol} market`}\r\n                  </Tooltip>\r\n                 }\r\n                 >\r\n                 <tr \r\n                  key={token.tokenId}\r\n                  className=\"order-book-order\"\r\n                   onClick={(e) => loadToken(web3, exchange, token.tokenAddress, dispatch, account)}\r\n                    >\r\n                    <td>{token.symbol}/ETH</td>\r\n  \r\n                 </tr>\r\n                 </OverlayTrigger>\r\n             )\r\n         })}\r\n\r\n       </tbody>\r\n     )\r\n\r\n}\r\n\r\nclass Market extends Component {\r\n \r\n  render() {\r\n    console.log(this.props.exchange)\r\n    return (\r\n      <div className=\"vertical\">\r\n        <div className=\"card bg-transparent text-white\">\r\n          <div className=\"card-header\">\r\n            Market\r\n            <OverlayTrigger\r\n                trigger={['hover', 'focus']}\r\n                 key={this.props.symbol}\r\n                 placement='top'\r\n                 overlay={\r\n                  <Tooltip className=\"tooltip\" id={this.props.symbol}>\r\n                     {`Click to add ${this.props.symbol} to metamask`}\r\n                  </Tooltip>\r\n                 }\r\n                 >\r\n                   <img className=\"metamask\" src=\"../metamask.png\" alt={`Click to add ${this.props.symbol} to metamask`}  onClick={(e) => addToMetamask(this.props.token)} />\r\n                 </OverlayTrigger>\r\n   \r\n          </div>\r\n          <div className=\"card-body order-book\">\r\n            <table className=\"table bg-transparent text-white table-sm small\">\r\n              { this.props.showTokens ? showTokens(this.props) : <Spinner type='table' /> }\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const tokensLoaded =  allTokensLoadedSelector(state)\r\n  \r\n  return {\r\n    showTokens: tokensLoaded,\r\n    allTokens: allTokensSelector(state),\r\n    web3: web3Selector(state),\r\n    exchange: exchangeSelector(state),\r\n    account: accountSelector(state),\r\n    symbol: tokenSymbolLoadedSelector(state),\r\n    token: tokenSelector(state)\r\n  }\r\n}\r\nexport default connect(mapStateToProps)(Market);\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { \r\n    exchangeSelector,\r\n    tokenSelector,\r\n    accountSelector\r\n } from '../store/selectors'\r\nimport { \r\n    loadAllOrders, \r\n    loadAllTokens, \r\n    subscribeToEvents,\r\n    loadUser\r\n} from '../store/interactions'\r\nimport Trades from './Trades'\r\nimport OrderBook from './OrderBook'\r\nimport MyTransactions from './MyTransactions'\r\nimport PriceChart from './PriceChart'\r\nimport Balance from './Balance'\r\nimport NewOrder from './NewOrder'\r\nimport Market from './Market'\r\n//import { loadUser } from '../store/actions';\r\n\r\nclass Content extends Component {\r\n    componentDidMount() {\r\n        this.loadBlockchainData(this.props)\r\n    }\r\n\r\n    async loadBlockchainData(props){\r\n        \r\n      const { dispatch, exchange, token, account } = props\r\n        //Token added to load specific token orders\r\n      \r\n        await subscribeToEvents(exchange, dispatch)\r\n         await loadAllTokens(exchange, dispatch).then( async () => {\r\n            await loadAllOrders(exchange, dispatch, token)\r\n         })\r\n         await loadUser(exchange, account, dispatch)\r\n        \r\n      \r\n       //  console.log('TOKEN FROM CONTENT : ',token)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"exchange\" >\r\n                <div className=\"vertical-split\">\r\n                    <Balance />\r\n                    <NewOrder />\r\n                </div>\r\n                <OrderBook />\r\n                <div className=\"vertical-split\">\r\n                    <PriceChart />\r\n                    <MyTransactions />\r\n                </div>\r\n                <div className=\"vertical-split\">\r\n                <Trades />\r\n                <Market />\r\n               \r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        exchange: exchangeSelector(state),\r\n        token: tokenSelector(state),\r\n        account: accountSelector(state)\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Content)","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Content from './Content'\r\nimport { connect } from 'react-redux'\r\nimport { \r\n  loadWeb3, \r\n  loadAccount, \r\n  loadToken, \r\n  loadExchange, \r\n  loadTokenSymbol,\r\n} from '../store/interactions'\r\nimport { \r\n   contractsLoadedSelector,\r\n } from '../store/selectors'\r\nimport {\r\n warningLoaded\r\n} from '../store/actions'\r\nclass Dex extends Component {\r\n  componentDidMount() {\r\n    this.loadBlockchainData(this.props.dispatch)\r\n  }\r\n  async loadBlockchainData(dispatch) {\r\n    const web3 = loadWeb3(dispatch)\r\n    if(!web3){\r\n        const data = { msg: 'Not connected to the network', desc: 'Please Download Metamask to acces this exchange and connect it to the proper network'}\r\n        dispatch(warningLoaded(data))\r\n    } else {\r\n        await web3.eth.net.getNetworkType() \r\n        const networkId = await web3.eth.net.getId()\r\n        await loadAccount(web3, dispatch)\r\n        const exchange = await loadExchange(web3, networkId, dispatch)\r\n        if(!exchange){\r\n          const data = { msg: 'Could not load exchange contract', desc: 'Make sure that you are connected to the proper network and refresh the page'}\r\n          dispatch(warningLoaded(data))\r\n          } else {  \r\n            let address = 0 // no adress set yet for token will load default\r\n            const token = await loadToken(web3, exchange, address, dispatch)// loadin token\r\n            if(!token){\r\n              const data = { msg: 'Could not load token contract', desc: 'Make sure that you are connected to the proper network and refresh the page'}\r\n              dispatch(warningLoaded(data))\r\n               } else {\r\n                await loadTokenSymbol(token, dispatch)\r\n               }\r\n          }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div >\r\n       { this.props.contractsLoaded ? <Content /> :\r\n        <div className=\"container text-center text-white\" ><h5>PLEASE CONNECT METAMASK TO THE RINKEBY NETWORK</h5><img className=\"rotate\" alt=\"Loading...\" src=\"../logo.svg\"></img></div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\nfunction mapStateToProps(state){\r\n  return {\r\n      contractsLoaded: contractsLoadedSelector(state)\r\n  }\r\n}\r\nexport default connect(mapStateToProps)(Dex);","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Spinner from './Spinner'\nimport { \n    accountSelector,\n    stackingSelector,\n    stacksSelector,\n    stackAmountSelector,\n    web3Selector\n } from '../store/selectors'\nimport {  \n    loadStackData,\n    stackToken,\n    unStackToken\n} from '../store/interactions'\nimport{\n    stackAmountChanged\n} from '../store/actions'\n\nconst showStack = (props) => {\n\n    const {\n        stacking,\n        dispatch,\n        account,\n        stacks,\n        stackAmount,\n        web3\n       \n    } = props\n    return (\n        <div className=\"container text-center\" >\n      \n            {stacks.map( (stack,index)  => {\n                return(\n                    <div\n                    key = {index}\n                    className=\"text-white text-right stacking-pool\"\n                     > \n                        <div className=\"stacking-head\">\n                            <h6> {stack.name} ({stack.symbol}) </h6>\n                        </div>\n                        <div className=\"stacking-cardbg\">\n                 \n                            <table className=\"table bg-transparent text-white table-sm small\">\n                                <tbody>\n                                    <tr>\n                                        <td>You have {web3.utils.fromWei(stack.stacked, 'ether')} ({stack.symbol}) Staked</td>\n                                    </tr>\n                                    <tr>\n                                        <td>Pool Supply : {web3.utils.fromWei(stack.supply, 'ether')} ({stack.symbol}) </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n\n                            <form  onSubmit={(event) => {\n                                event.preventDefault()\n                                stackToken(stacking, stack.tokenStack, account, stackAmount, index, web3, dispatch)\n                             }}>\n                                <div className=\"stack-form\">\n                                    <div className=\"stack-pending\">{parseInt(web3.utils.fromWei(stack.pending, 'ether')).toFixed(3)}</div>\n                                   \n                                    <div className=\"stack-input\">\n                                    <input\n                                        type=\"number\"\n                                        min=\"0.000000000000000001\"\n                                        step=\"0.000000000000000001\"\n                                        placeholder=\"Amount to stake\"\n                                        onChange={(e) => dispatch(stackAmountChanged(e.target.value))}\n                                        className=\"form-control form-control-sm \"\n                                        required\n                                    />\n                                    </div>\n            \n                                    <br/>\n                                </div>\n       \n                                <div className=\"stack-control\">\n                                    <div className=\"stack-btn\">\n                                        <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm btn-custom \">Stake</button> \n                                    </div>\n                                    <div className=\"stack-btn\">\n                                        <button className=\"btn btn-primary btn-block btn-sm btn-custom \"\n                                                onClick={(event) => {\n                                                event.preventDefault()\n                                                unStackToken(stacking, account, stackAmount, index, web3, dispatch)}\n                                                }>Unstake</button>\n                                    </div>\n            \n                                </div> \n\n                             </form>        \n                        </div>\n                    </div>\n                )\n            } \n        \n            )}\n\n\n        </div>\n    )\n\n}\n\n\nclass DefiContent extends Component {\n    componentDidMount() {\n        this.loadBlockchainData(this.props)\n    }\n\n    async loadBlockchainData(props){\n        \n      const { dispatch, stacking, account} = props\n        //Token added to load specific token orders\n       \n   await loadStackData(stacking, dispatch, account)\n      \n       //  console.log('TOKEN FROM CONTENT : ',token)\n    }\n    render() {\n        return(\n            <div>\n            {this.props.stacking ? showStack(this.props) : <Spinner />}\n           \n           </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        account: accountSelector(state),\n        stacking: stackingSelector(state),\n        stacks: stacksSelector(state),\n        stackAmount: stackAmountSelector(state),\n        web3: web3Selector(state)\n    }\n}\nexport default connect(mapStateToProps)(DefiContent)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { \n  loadWeb3, \n  loadAccount,  \n  loadStacking\n} from '../store/interactions'\nimport { \n  stackingLoadedSelector,\n } from '../store/selectors'\nimport {\n warningLoaded\n} from '../store/actions'\nimport DefiContent from './DefiContent'\n\n\n\n\n\n\nclass Defi extends Component {\n  componentDidMount() {\n    this.loadBlockchainData(this.props.dispatch)\n  }\n  async loadBlockchainData(dispatch) {\n    const web3 = loadWeb3(dispatch)\n    if(!web3){\n        const data = { msg: 'Not connected to the network', desc: 'Please Download Metamask to acces this exchange and connect it to the proper network'}\n        dispatch(warningLoaded(data))\n    } else {\n        await web3.eth.net.getNetworkType() \n        const networkId = await web3.eth.net.getId()\n        await loadAccount(web3, dispatch)\n        const stacking = await loadStacking(web3, networkId, dispatch)\n        if(!stacking){\n          const data = { msg: 'Could not load exchange contract', desc: 'Make sure that you are connected to the proper network and refresh the page'}\n          dispatch(warningLoaded(data))\n          } else {  \n            // const token = await loadToken(web3, exchange, address, dispatch)// loadin token\n            // if(!token){\n            //   const data = { msg: 'Could not load token contract', desc: 'Make sure that you are connected to the proper network and refresh the page'}\n            //   dispatch(warningLoaded(data))\n            //    }\n          }\n         \n    }\n  }\n\n  render() {\n    return (\n      <div >\n       { this.props.contractsLoaded ? <DefiContent />:\n        <div className=\"container text-center text-white\" ><h5>PLEASE CONNECT METAMASK TO THE RINKEBY NETWORK</h5><img className=\"rotate\" alt=\"Loading...\" src=\"../logo.svg\"></img></div>\n        }\n      </div>\n    )\n  }\n}\nfunction mapStateToProps(state){\n  return {\n      contractsLoaded: stackingLoadedSelector(state)\n  }\n}\nexport default connect(mapStateToProps)(Defi);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\n class Home extends Component {\r\n\r\n    render() {\r\n    return (\r\n\r\n<div className=\"container\">\r\n    <h1 className=\"text-white underline\">Hello Universe</h1>\r\n    <p className=\"text-white\">Idencentralize is a unique concept based on Ethereum networks where gaming and trading merge.\r\n    We revamped the traditional trading and yield farming by adding a NFT that gives there holders some\r\n    \"Super Powers\". They can be earned by participation, trades, and exchanges. I decentralize ultimate objective\r\n    is to bring decentralization a step further with a DEX for ERC20 tokens and a Market Place for your NFTs. A Liquidity Pool\r\n    where users can farm some Idencentralized token and use there super powers NFTs.\r\n\r\n    </p>\r\n    <div> </div>\r\n</div>\r\n);\r\n}\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n \r\n\r\n    return {\r\n       \r\n    }\r\n  }\r\n  \r\n  export default connect(mapStateToProps)(Home)\r\n\r\n","import React, {Component} from 'react';  \r\nimport './App.css';  \r\nimport { connect } from 'react-redux'\r\nimport {\r\n  warningSelector,\r\n} from '../store/selectors'\r\nimport {\r\n  UnloadWarning\r\n} from '../store/interactions'\r\n\r\nclass Popup extends Component {  \r\n    componentDidMount(){\r\n        this.loadAppData(this.props.dispatch)\r\n      }\r\n      async loadAppData(dispatch) {\r\n      \r\n      }\r\n\r\n     \r\n      render() {  \r\n        return (  \r\n            <div className='popup'>  \r\n            <div className='popupinner container'>  \r\n            <h4 className=\"underline\">{this.props.warning.msg}</h4> \r\n            <p>{this.props.warning.desc}</p> \r\n            {this.props.loaded}\r\n             <button \r\n                    className=\"btn btn-primary btn-block btn-sm btn-custom\" \r\n                    onClick={() => UnloadWarning(this.props.dispatch)}>Close</button>  \r\n            </div>  \r\n            </div>  \r\n          )\r\n        }\r\n      }    \r\n       \r\n\r\n  \r\n    function mapStateToProps(state){\r\n     \r\n        return { \r\n          warning: warningSelector(state)\r\n        }\r\n      }\r\n      \r\n      export default  connect(mapStateToProps)(Popup);","import React, {Component} from 'react';  \r\nimport './App.css';  \r\nimport { connect } from 'react-redux'\r\n\r\nimport {\r\n  CloseAdminPanel,\r\n  queryRegisterToken,\r\n  registerToken\r\n} from '../store/interactions'\r\n\r\nimport {\r\nrTokenSelector,\r\nexchangeSelector,\r\naccountSelector,\r\nweb3Selector,\r\nrTokenLoadedSelector\r\n} from '../store/selectors'\r\n\r\n\r\n\r\nconst showData = (props) => {\r\n    const {rtoken}=  props\r\n\r\n    return(\r\n\r\n        <div className=\"col-12 col-sm-auto pl-sm-0 admin\">\r\n            <table className=\"table bg-transparent text-white table-sm small\">\r\n                <tbody>\r\n                    <tr>\r\n                        <td className=\"text-right\">Name:</td>\r\n                        <td className=\"text-left\">{rtoken.name}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"text-right\">Symbol:</td>\r\n                        <td className=\"text-left\">{rtoken.symbol}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"text-right\">Total Supply:</td>\r\n                        <td className=\"text-left\">{rtoken.totalSupply/(10**rtoken.decimals)}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"text-right\">View on Etherscan:</td>\r\n                        <td className=\"text-left\"><a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://etherscan.io/address/${rtoken.address}`}>{rtoken.address}</a></td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n\r\n} \r\n\r\nclass Admin extends Component {  \r\n    componentDidMount() {\r\n        this.loadBlockchainData(this.props)\r\n    }\r\n\r\n    async loadBlockchainData(props){\r\n        \r\n      }\r\n     \r\n      render() {  \r\n        return(\r\n            <div className='popup'>  \r\n            <div className='popupinner container '>  \r\n            <h4 className=\"underline\">Administration Panel</h4> \r\n            <h6>Token Registration</h6> \r\n            {this.props.rtokenLoaded ? \r\n            showData(this.props) : null} \r\n            <div className='admin'>\r\n            <form className =\"row\" onSubmit={(event) => {\r\n                event.preventDefault()\r\n                registerToken( this.props.exchange, this.props.account,this.props.rtoken.address,  this.props.dispatch)\r\n               \r\n                \r\n            }}>\r\n                <div className=\"col-12 col-sm pr-sm-2\">\r\n                    <input\r\n                    type=\"text\"\r\n                    min=\"42\"\r\n                    max=\"42\"\r\n                    placeholder='Contract Address'\r\n                    // we check token info\r\n                    onChange={(e) => queryRegisterToken(this.props.exchange, this.props.account, e.target.value, this.props.dispatch)}\r\n                    className=\"form-control form-control-sm bg-transparent text-white\"\r\n                    required\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-sm-auto pl-sm-0\">\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm btn-custom\">Register Token</button>\r\n                </div>\r\n            </form>\r\n\r\n             <button \r\n                    className=\"btn btn-primary btn-block btn-sm btn-custom\" \r\n                    onClick={() => CloseAdminPanel(this.props.dispatch)}>Close</button>  \r\n            </div>  \r\n            </div>\r\n            </div>  \r\n        )\r\n        }\r\n      }    \r\n       \r\n\r\n  \r\n    function mapStateToProps(state){\r\n       const showit = rTokenLoadedSelector(state)\r\n        return { \r\n         rtokenLoaded: showit,   \r\n         rtoken: rTokenSelector(state),\r\n         exchange: exchangeSelector(state),\r\n         account: accountSelector(state),\r\n         web3: web3Selector(state),\r\n        }\r\n      }\r\n      \r\n      export default  connect(mapStateToProps)(Admin);","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { \n  loadWeb3, \n  loadAccount,  \n  loadStacking\n} from '../store/interactions'\nimport { \n  stackingLoadedSelector,\n } from '../store/selectors'\nimport {\n warningLoaded\n} from '../store/actions'\n\n\n\n\n\n\n\nclass Nft extends Component {\n  componentDidMount() {\n    this.loadBlockchainData(this.props.dispatch)\n  }\n  async loadBlockchainData(dispatch) {\n    const web3 = loadWeb3(dispatch)\n    if(!web3){\n        const data = { msg: 'Not connected to the network', desc: 'Please Download Metamask to acces this exchange and connect it to the proper network'}\n        dispatch(warningLoaded(data))\n    } else {\n        await web3.eth.net.getNetworkType() \n        const networkId = await web3.eth.net.getId()\n        await loadAccount(web3, dispatch)\n        const stacking = await loadStacking(web3, networkId, dispatch)\n        if(!stacking){\n          const data = { msg: 'Could not load exchange contract', desc: 'Make sure that you are connected to the proper network and refresh the page'}\n          dispatch(warningLoaded(data))\n          } else {  \n            // const token = await loadToken(web3, exchange, address, dispatch)// loadin token\n            // if(!token){\n            //   const data = { msg: 'Could not load token contract', desc: 'Make sure that you are connected to the proper network and refresh the page'}\n            //   dispatch(warningLoaded(data))\n            //    }\n          }\n         \n    }\n  }\n\n  render() {\n    return (\n      <div >\n       {/* { this.props.contractsLoaded ? <DefiContent />:\n        <div className=\"container text-center text-white\" ><h5>PLEASE CONNECT METAMASK TO THE RINKEBY NETWORK</h5><img className=\"rotate\" alt=\"Loading...\" src=\"../logo.svg\"></img></div>\n        } */}\n      </div>\n    )\n  }\n}\nfunction mapStateToProps(state){\n  return {\n      contractsLoaded: stackingLoadedSelector(state)\n  }\n}\nexport default connect(mapStateToProps)(Nft);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\n//import Switch from 'react-bootstrap/esm/Switch';\r\nimport Navigator from './Navigator.js';\r\n\r\nimport Dex from './Dex.js';\r\nimport Defi from './Defi.js';\r\nimport Home from './Home.js';\r\nimport Popup from './Popup.js';\r\nimport Admin from './Admin.js';\r\nimport Nft from './Nft.js';\r\nimport './App.css'; \r\nimport { \r\n  adminPanelSelector,\r\n  warningSelector,\r\n  contentLoadedSelector,\r\n  contentDataLoadedSelector\r\n } from '../store/selectors.js';\r\n\r\n\r\n const renderContent = (props) => {\r\nconst {contentData} = props\r\n\r\n  if(contentData === 'Dex'){\r\n    return (\r\n      <Dex/>\r\n    )   \r\n  }\r\n  if(contentData === 'Defi'){\r\n    return (\r\n      <Defi/>\r\n    )   \r\n  }\r\n  if(contentData === 'Nft'){\r\n    return (\r\n      <Nft/>\r\n    )   \r\n  }\r\n  console.log('CONTENT : ',contentData)\r\n \r\n\r\n }\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount(){\r\n    \r\n    this.loadAppData(this.props.dispatch)\r\n  }\r\n  async loadAppData(dispatch) {\r\n \r\n  }\r\n\r\n  render() {\r\n    return (\r\n<main>\r\n<Navigator />\r\n{this.props.warning ? <Popup/> : null} \r\n{this.props.admin.loaded ? <Admin/> : null} \r\n{this.props.content  ? renderContent(this.props) : null} \r\n{!this.props.content  ? <Home /> : null} \r\n \r\n\r\n</main>\r\n\r\n)\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  \r\n \r\n  \r\n  return {\r\n    \r\n    warning: warningSelector(state),\r\n    admin: adminPanelSelector(state),\r\n    content: contentLoadedSelector(state),\r\n    contentData: contentDataLoadedSelector(state)\r\n  }\r\n}\r\n\r\nexport default  connect(mapStateToProps)(App);\r\n","import { combineReducers } from 'redux';\r\n\r\n\r\n\r\nfunction warning(state = {}, action) {\r\n  switch(action.type){\r\n      case 'WARNING_LOADED':\r\n      return  { ...state, loaded: true ,  data: action.data }\r\n      case 'WARNING_AK_LOADED':\r\n      return  { ...state, loaded: false , data: null }\r\n      default:\r\n          return state\r\n  }\r\n}\r\n\r\nfunction adminPanel(state = {}, action) {\r\n  switch(action.type){\r\n      case 'ADMIN_ON':\r\n      return  { ...state, loaded: true  }\r\n      case 'ADMIN_OFF':\r\n      return  { ...state, loaded: false }\r\n      case 'QUERY_REGISTER_TOKEN_ADDRESS':\r\n      return  { ...state, loaded: true, data: action.data }\r\n      case 'SHOW_REGISTER_TOKEN_INFO':\r\n        return  { ...state, info: true }\r\n\r\n      \r\n      default:\r\n          return state\r\n  }\r\n}\r\n\r\nfunction content(state = {}, action) {\r\n  switch(action.type){\r\n    case 'CONTENT_LOADED':\r\n      return  { ...state, loaded: true  }\r\n      case 'CONTENT_DATA_LOADED':\r\n      return  { ...state, loaded: true, data: action.data  }\r\n      default:\r\n        return state\r\n  }\r\n}\r\n\r\n\r\n\r\n// reducers\r\nfunction web3(state = {}, action) {\r\n    switch(action.type){\r\n        case 'WEB3_LOADED':\r\n        return { ...state, connection: action.connection}\r\n        case 'WEB3_ACCOUNT_LOADED':\r\n        return { ...state, account: action.account}\r\n        case 'ETHER_BALANCE_LOADED':\r\n          return { ...state, balance : action.balance}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n////////////////////////////////////////////\r\nfunction token(state = {}, action) {\r\n    switch (action.type) {\r\n      case 'TOKEN_LOADED':\r\n        return { ...state, loaded: true, contract: action.contract }\r\n         case 'TOKEN_BALANCE_LOADED':\r\n          return { ...state, balance : action.balance}\r\n        case 'TOKEN_SYMBOL_LOADED':\r\n        return { ...state, loaded: true, symbol: action.symbol}\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n\r\n  function stacking(state = {}, action) {\r\n    switch (action.type) {\r\n        case 'STACKING_LOADED':\r\n            return { ...state, loaded: true, contract: action.contract }\r\n            case 'STACKS':\r\n            return { ...state, loaded: true, data: action.data }\r\n            case 'STACKS_AMOUNT_CHANGED':\r\n            return { ...state, loaded: true, amount: action.amount }\r\n            default:\r\n              return state\r\n    }\r\n  }\r\n\r\n\r\n////////////////////////////////////////////////////////////\r\n  function exchange(state = {}, action) {\r\n    let index, data\r\n    switch (action.type) {\r\n        case 'EXCHANGE_LOADED':\r\n            return { ...state, loaded: true, contract: action.contract }\r\n        case 'CANCELLED_ORDERS_LOADED':\r\n            return { ...state, cancelledOrders: { loaded: true, data: action.cancelledOrders }}\r\n            case 'FILLED_ORDERS_LOADED':\r\n                return { ...state, filledOrders: { loaded: true, data: action.filledOrders }}\r\n                case 'ALL_ORDERS_LOADED':\r\n                    return { ...state, allOrders: { loaded: true, data: action.allOrders }} ////////// For actual TOKEN\r\n                    case 'LOAD_USER':\r\n                      return { ...state, user: { loaded: true, admin: action.admin }}\r\n\r\n                    case 'TOTAL_ORDERS_LOADED':\r\n                    return { ...state, totalOrders: { loaded: true, data: action.totalOrders }}\r\n                    case 'TOTAL_ORDERS_FILLED':\r\n                    return { ...state, totalOrdersFilled: { loaded: true, data: action.totalOrdersFilled }}\r\n                    case 'TOTAL_ORDERS_CANCELLED':\r\n                    return { ...state, totalOrdersCancelled: { loaded: true, data: action.totalOrdersCancelled }}\r\n\r\n                    /////////////////////////////////////////////////////////////////////////////////////////// ALL TOKENS\r\n                    case 'MARKET_LOADING':\r\n                      return { ...state,  market: {loaded: false}}\r\n\r\n                      case 'ALL_TOKENS_LOADED':\r\n                      return { ...state, allTokens: { loaded: true, data: action.allTokens }}\r\n                      case 'CANCELLED_TOKENS_LOADED':\r\n                      return { ...state, cancelledTokens: { loaded: true, data: action.cancelledTokens }}\r\n\r\n                    case 'ORDER_CANCELLING':\r\n                      return { ...state, orderCancelling: true }\r\n                      case 'ORDER_CANCELLED':\r\n                      return { \r\n                        ...state,\r\n                        orderCacelling: false,\r\n                        cancelledOrders: {\r\n                          ...state.cancelledOrders,\r\n                          data: [\r\n                            ...state.cancelledOrders.data,\r\n                            action.order\r\n                          ]\r\n                        }\r\n\r\n                       }\r\n                       case 'ORDER_FILLED':\r\n                         // prevent duplicate\r\n                         index = state.filledOrders.data.findIndex(order => order.id === action.order.id)\r\n                         if(index === -1){\r\n                           data = [...state.filledOrders.data, action.order]\r\n                         }else {\r\n                           data = state.filledOrders.data\r\n                         }\r\n                         return {\r\n                           ...state,\r\n                           orderFilling: false,\r\n                           filledOrders: {\r\n                             ...state.filledOrders,\r\n                             data\r\n                           }\r\n                         }\r\n                      case 'ORDER_FILLING':\r\n                        return { ...state, orderFilling: true }\r\n\r\n                      ///////////////BALANCES\r\n                      case 'EXCHANGE_ETHER_BALANCE_LOADED':\r\n                        return { ...state, etherBalance : action.balance}\r\n                      case 'EXCHANGE_TOKEN_BALANCE_LOADED':\r\n                        return { ...state, tokenBalance: action.balance}\r\n                      case 'BALANCES_LOADING':\r\n                        return { ...state,balancesLoading: true}\r\n                      case 'BALANCES_LOADED':\r\n                        return { ...state,balancesLoading: false}\r\n                      case 'ETHER_DEPOSIT_AMOUNT_CHANGED':\r\n                        return { ...state,etherDepositAmount: action.amount}\r\n                      case 'ETHER_WITHDRAW_AMOUNT_CHANGED':\r\n                        return { ...state,etherWithdrawAmount: action.amount}\r\n                      case 'TOKEN_DEPOSIT_AMOUNT_CHANGED':\r\n                        return { ...state,tokenDepositAmount: action.amount}\r\n                      case 'TOKEN_WITHDRAW_AMOUNT_CHANGED':\r\n                        return { ...state,tokenWithdrawAmount: action.amount}\r\n\r\n                      case 'BUY_ORDER_AMOUNT_CHANGED':\r\n                        return { ...state, buyOrder:{...state.buyOrder, amount: action.amount } }\r\n                      case 'BUY_ORDER_PRICE_CHANGED':\r\n                        return { ...state, buyOrder: {...state.buyOrder, price: action.price } }\r\n                     case 'BUY_ORDER_MAKING':\r\n                        return { ...state, buyOrder: { ...state.buyOrder, amount: null, price: null, making: true } }\r\n\r\n                        case 'ORDER_MADE':\r\n                          // prevent duplicate order\r\n                          index = state.allOrders.data.findIndex(order => order.id === action.order.id)\r\n\r\n                          if(index === -1) {\r\n                            data = [...state.allOrders.data, action.order]\r\n                          } else {\r\n                            data  = state.allOrders.data\r\n                          }\r\n\r\n                          return {\r\n                            ...state,\r\n                            allOrders:{\r\n                              ...state.allOrders,\r\n                              data\r\n                            },\r\n                            buyOrder:{\r\n                              ...state.buyOrder,\r\n                              making: false\r\n                            },\r\n                            sellOrder:{\r\n                              ...state.sellOrder,\r\n                              making: false\r\n                            }\r\n                          }\r\n                          case 'SELL_ORDER_AMOUNT_CHANGED':\r\n                            return { ...state, sellOrder:{...state.sellOrder, amount: action.amount } }\r\n                          case 'SELL_ORDER_PRICE_CHANGED':\r\n                            return { ...state, sellOrder: {...state.sellOrder, price: action.price } }\r\n                          case 'SELL_ORDER_MAKING':\r\n                            return { ...state, sellOrder: {...state.sellOrder, amount: null, price: null, making: true} }\r\n    \r\n                      \r\n                      default:\r\n                        return state\r\n    }\r\n  }\r\n\r\n\r\n   const initialState = {\r\n     loading: false,\r\n     tokens: [],\r\n     error: null\r\n   };\r\n  \r\n   function tokens(state = initialState, action) {\r\n    switch (action.type) {\r\n      case 'ALL_TOKENS_STARTED':\r\n        return { ...state, loading: true\r\n        };\r\n      case 'ALL_TOKENS_LOADED':\r\n        return { ...state, loading: false, error: null, tokens: [...state.tokens, action.tokens]\r\n        };\r\n      case 'ALL_TOKENS_FAILURE':\r\n        return {...state, loading: false,error: action.error\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n \r\n\r\n\r\n\r\n\r\n// combining reducers\r\n\r\nconst rootReducer = combineReducers({\r\n    web3,\r\n    token,\r\n    exchange,\r\n    warning,\r\n    tokens,\r\n    adminPanel,\r\n    content,\r\n    stacking\r\n   \r\n})\r\n\r\n//exporting combined reducers\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware, compose} from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from './reducers'\r\n\r\n\r\nconst loggerMiddleware = createLogger()\r\nconst middleware = []\r\n\r\n// for redux dev tools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nexport default function configureStore(preloadedState){\r\n    return createStore(\r\n        rootReducer,\r\n        preloadedState,\r\n        composeEnhancers(applyMiddleware(...middleware, loggerMiddleware))\r\n\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './components/App.css';\nimport App from './components/App.js';\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <Provider store = {configureStore()}>\n    <BrowserRouter>\n     <App />\n    </BrowserRouter>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}